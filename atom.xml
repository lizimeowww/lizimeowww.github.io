<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lizimeow&#39;s blog</title>
  <subtitle>随手记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-26T07:56:33.434Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lizimeow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo＋GitHub pages＋多说搭建博客</title>
    <link href="http://yoursite.com/2016/11/26/hexo+GitHub%20pages+%E5%A4%9A%E8%AF%B4%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/11/26/hexo+GitHub pages+多说搭建博客/</id>
    <published>2016-11-26T04:46:25.000Z</published>
    <updated>2016-11-26T07:56:33.434Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我的搭建环境"><a href="#我的搭建环境" class="headerlink" title="我的搭建环境"></a>我的搭建环境</h3><blockquote>
<p>OS: Windows_NT 6.3.9600 win32 x64</p>
<p>hexo-cli: 1.0.2</p>
<p>hexo：3.2.2</p>
<p>hexo theme：material</p>
<p>git：2.9.0.windows.1</p>
</blockquote>
<h2 id="Step-1-安装-Node-js"><a href="#Step-1-安装-Node-js" class="headerlink" title="Step 1 安装 Node.js"></a>Step 1 安装 Node.js</h2><p><a href="https://nodejs.org/en/" target="_blank" rel="external">nodejs官网</a></p>
<h2 id="Step-2-安装Hexo"><a href="#Step-2-安装Hexo" class="headerlink" title="Step 2 安装Hexo"></a>Step 2 安装Hexo</h2><p><code>npm install -g hexo</code></p>
<h2 id="Step-3-搭建本地博客"><a href="#Step-3-搭建本地博客" class="headerlink" title="Step 3 搭建本地博客"></a>Step 3 搭建本地博客</h2><ul>
<li><p><strong>新建一个目录,如blog</strong></p>
</li>
<li><p><strong>在该目录下执行</strong><br><code>hexo init</code><br><code>npm install</code><br>此时默认主题默认配置的博客就搭建完成了</p>
</li>
<li><p><strong>安装关于启动服务器的插件</strong><br><code>npm install hexo-server --save</code></p>
</li>
<li><p><strong>启动服务器 默认4000端口</strong><br><code>hexo s</code></p>
</li>
<li><p>5.打开<a href="localhost:4000" target="_blank" rel="external">localhost:4000</a></p>
</li>
</ul>
<h2 id="Step-4-主题和配置"><a href="#Step-4-主题和配置" class="headerlink" title="Step 4 主题和配置"></a>Step 4 主题和配置</h2><p>在 <a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a>选择某个喜欢的主题，以<a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="external">Material</a>为例，假设当前目录为 “blog”。</p>
<p>前往material主题发布页面下载主题的压缩包</p>
<p>解压并将目录更名为<strong>material</strong></p>
<p> 将<strong>material</strong>目录 移动至 <strong>blog/themes/</strong> 目录下</p>
<p>将 blog 目录下的 <strong>_config.yml</strong> 文件中的 <strong>theme</strong> 属性值改为 <strong>material</strong></p>
<p>此时主题更换成功，可启动 server 验证效果</p>
<p>对于<strong>_config.yml</strong> 中的其他属性可根据情况自行修改</p>
<h2 id="Step-5-将博客部署到Github"><a href="#Step-5-将博客部署到Github" class="headerlink" title="Step 5 将博客部署到Github"></a>Step 5 将博客部署到Github</h2><ul>
<li><p><strong>新建仓库名为 <code>github用户名.github.io</code></strong><br>比如我的就是 <a href="lizimeowww.github.io">lizimeowww.github.io</a><br>然后就可以访问了</p>
</li>
<li><p><strong>安装 hexo 关于git 的组件</strong><br><code>npm install hexo-deployer-git --save</code></p>
</li>
<li><p><strong>在_config.yml 中为 git 添加配置</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    type: git</div><div class="line">    repository: 你的仓库地址(git@github.com/用户名/用户名.github.io.git)</div><div class="line">    branch: master</div></pre></td></tr></table></figure>
</li>
<li><p><strong>执行</strong><br>  &lt;每次修改都要执行这些命令才能在github pages看到效果&gt;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
</li>
</ul>
<p>部署完成之后访问你的如 <code>lizimeowww.github.io</code> 的网址,即可看到和本地一样的效果。</p>
<h2 id="Step-6-删写博客"><a href="#Step-6-删写博客" class="headerlink" title="Step 6 删写博客"></a>Step 6 删写博客</h2><ul>
<li><p><strong>新建博客</strong><br><code>hexo new &quot;文章名&quot;</code><br>或者直接写一个.md文件丢进<code>source/_post</code>这个目录下就可以<br>记得要加上Front-matter </p>
<img src="/2016/11/26/hexo+GitHub%20pages+多说搭建博客/1.png" alt="image" title="image">
</li>
<li><p><strong>删除文章</strong><br>直接删掉 source/_post 下对应文章的文件，然后重新生成+部署即可。有时可能要多刷新几次才能看到效果。</p>
</li>
</ul>
<h2 id="Step-7-评论系统"><a href="#Step-7-评论系统" class="headerlink" title="Step 7 评论系统"></a>Step 7 评论系统</h2><ul>
<li><p>登录 <a href="http://duoshuo.com/" target="_blank" rel="external">http://duoshuo.com/</a>点击<strong>我要安装</strong>，设置自己的网站信息，获得以下通用代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 多说评论框 start --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds-thread"</span> <span class="attr">data-thread-key</span>=<span class="string">"请将此处替换成文章在你的站点中的ID"</span> <span class="attr">data-title</span>=<span class="string">"请替换成文章的标题"</span> <span class="attr">data-url</span>=<span class="string">"请替换成文章的网址"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多说评论框 end --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">var duoshuoQuery = &#123;short_name:"lizimeowww"&#125;;</div><div class="line">	(function() &#123;</div><div class="line">		var ds = document.createElement('script');</div><div class="line">		ds.type = 'text/javascript';ds.async = true;</div><div class="line">		ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';</div><div class="line">		ds.charset = 'UTF-8';</div><div class="line">		(document.getElementsByTagName('head')[0] </div><div class="line">		 || document.getElementsByTagName('body')[0]).appendChild(ds);</div><div class="line">	&#125;)();</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多说公共JS代码 end --&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在<code>_config.yml</code>中添加多说的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">duoshuo: </div><div class="line">  #on: true</div><div class="line">  domain: http://lizimeowww.duoshuo.com</div><div class="line">  # 是否开启多说评论，http://duoshuo.com/create-site/</div><div class="line">  # 使用上面网址登陆你的多说，然后创建站点，在 domain 中填入你设定的域名</div><div class="line">  # http://你的多说域名.duoshuo.com</div></pre></td></tr></table></figure>
</li>
<li><p>打开<code>themes\landscape\layout\_partial\comment.ejs</code>，全选，替换为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;% if (page.comments)&#123; %&gt;  </div><div class="line">&lt;section id=&quot;comment&quot;&gt;  </div><div class="line">  这里要放置多说提供的通用代码  </div><div class="line">&lt;/section&gt;  </div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>修改模板</p>
<p>将data-thread-key=”请将此处替换成文章在你的站点中的ID” 替换成data-thread-key=”&lt;%= page.path %&gt;”<br>将data-title=”请替换成文章的标题” 替换成 data-title=”&lt;%= page.title %&gt;”<br>将data-url=”请替换成文章的网址” 替换成 data-url=”&lt;%= page.permalink %&gt;”</p>
<p>​</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看教程不如看官方文档！</p>
<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo的官方文档</a></p>
<p><a href="https://material.vss.im/start/" target="_blank" rel="external">material主题的官方文档</a></p>
<p><del>多说好丑</del></p>
<p>原本接了Travis CI 自动部署 不知道哪里搞错…博客就被我玩坏了😂</p>
<p> 等我考完试再把多说改成Disqus..&amp;重新弄一下自动部署好了…..</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;我的搭建环境&quot;&gt;&lt;a href=&quot;#我的搭建环境&quot; class=&quot;headerlink&quot; title=&quot;我的搭建环境&quot;&gt;&lt;/a&gt;我的搭建环境&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;OS: Windows_NT 6.3.9600 win32 x64&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>解决Ruby gem被墙的问题</title>
    <link href="http://yoursite.com/2016/11/24/2016-11-24-%E8%A7%A3%E5%86%B3Ruby%20gem%E8%A2%AB%E5%A2%99%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/11/24/2016-11-24-解决Ruby gem被墙的问题/</id>
    <published>2016-11-24T02:26:49.000Z</published>
    <updated>2016-11-26T07:39:06.154Z</updated>
    
    <content type="html"><![CDATA[<p>gem  install 的时候…..</p>
<p><code>C:\Windows\System32&gt;gem install jekyll ERROR:  Could not find a valid gem &#39;jekyll&#39; (&gt;= 0), here is why:           Unable to download data from https://rubygems.org/ - SSL_connect retur ned=1 errno=0 state=SSLv3 read server certificate B: certificate verif</code></p>
<p>被墙了…</p>
<p>所以只能翻墙或者换源…</p>
<p>之前用SocksCap翻得好好的…今天突然不行了<em>(:зゝ∠)</em>…</p>
<p>所以还是换个源…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ gem sources --remove https://rubygems.org/</div><div class="line">$ gem sources -a https://ruby.taobao.org/</div><div class="line">$ gem sources -l</div><div class="line">*** CURRENT SOURCES ***</div><div class="line"></div><div class="line">https://ruby.taobao.org</div></pre></td></tr></table></figure>
<p>换taobao源的时候报了这个错..- - </p>
<p><code>Error fetching https://ruby.taobao.org/: SSL_connect returned=1 errno=0 stat</code></p>
<p>大概有两种解决方法</p>
<h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><ul>
<li><p>1、下载<a href="http://pan.baidu.com/s/1sl8fk1f" target="_blank" rel="external">http://pan.baidu.com/s/1sl8fk1f</a> 复制到ruby安装的根目录</p>
</li>
<li><p>2、添加系统环境变量：</p>
<p>SSL_CERT_FILE=ruby的根目录加\cacert.pem（类似c:\Ruby22-x64\cacert.pem）</p>
</li>
<li><p>3、关闭命令行，重新打开，重新键入</p>
<p><code>gem sources -a https://ruby.taobao.org/</code></p>
</li>
</ul>
<h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><ul>
<li>使用 <a href="http://gems.ruby-china.org/" target="_blank" rel="external">http://gems.ruby-china.org/</a> 做为源</li>
</ul>
<p>（第二种没试..第一种亲测可行…</p>
<p><del>fu*k gfw</del>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gem  install 的时候…..&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:\Windows\System32&amp;gt;gem install jekyll ERROR:  Could not find a valid gem &amp;#39;jekyll&amp;#39; (&amp;gt;= 0),
    
    </summary>
    
    
      <category term="杂" scheme="http://yoursite.com/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序的小练手</title>
    <link href="http://yoursite.com/2016/11/23/2016-11-23-wechat-demo/"/>
    <id>http://yoursite.com/2016/11/23/2016-11-23-wechat-demo/</id>
    <published>2016-11-23T11:22:31.000Z</published>
    <updated>2016-11-26T07:38:32.815Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>喵~</p>
</blockquote>
<p>微信小程序是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。用完即走，适合场景化的问题。</p>
<p>微信推了小程序之后大家对它的关注度一直很高。所以就和朋神默默的写了个demo…</p>
<p style="color:#aaa;font-size:14px;">10月底写的小程序…现在11月都快过完了才写博客2333<em>(:зゝ∠)</em>……..</p>

<p><img src="2.gif" alt="2"></p>
<p>考虑了一下小程序用完即走的定位，我们做的这个东西功能十分的简单明确，就是用来进行活动的查看和签到，通过微信提供的位置的api获取坐标进行位置的判断。</p>
<p>因为功能比较简单所以就没有用脚手架….</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p> <img src="1.png" alt="1"></p>
<p>整个项目的结构大概如图，小程序结构还是比较清晰&amp;好理解的，<code>.js</code>脚本文件，<code>.json</code>配置文件，<code>.wxss</code>样式表文件 </p>
<p>app.json 是对整个小程序的全局配置,可以配置有你的项目哪些页面，tabBar，导航条，网络超时时间等。</p>
<p>app.js是小程序逻辑。在app.js里用<code>App()</code> 函数用来注册一个小程序。指定小程序的生命周期函数等。</p>
<p><strong>tips：</strong></p>
<p><strong>pages里的四个文件必须具有相同的路径与文件名。只能配置最少2个、最多5个 tab</strong> 。</p>
<h3 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a>WXML</h3><p>有以下几个功能，感觉跟vue差不多-  -….文档写的挺清楚的….没什么好讲的地方…</p>
<p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/data.html?t=20161122" target="_blank" rel="external">数据绑定</a>、<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/list.html?t=20161122" target="_blank" rel="external">列表渲染</a>、<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/conditional.html?t=20161122" target="_blank" rel="external">条件渲染</a>、<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/template.html?t=20161122" target="_blank" rel="external">模板</a>、<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/event.html?t=20161122" target="_blank" rel="external">事件</a>、<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/import.html?t=20161122" target="_blank" rel="external">引用</a></p>
<h3 id="WXSS"><a href="#WXSS" class="headerlink" title="WXSS"></a>WXSS</h3><p>跟CSS几乎是一样，多扩展了两个特性，</p>
<ul>
<li><p>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。</p>
<p>rem（root em）: 规定屏幕宽度为20rem；1rem = (750/20)rpx 。</p>
</li>
<li><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径。</p>
</li>
</ul>
<h2 id="活动的排序"><a href="#活动的排序" class="headerlink" title="活动的排序"></a>活动的排序</h2><p>获取活动的数据，活动有三种状态，正在进行，即将开始，已结束。要令正在进行的活动排在活动列表的最前面，然后按照活动的开始时间进行排序。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">wx.request(&#123;</div><div class="line">        url,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="params">resp</span> =&gt;</span> &#123;</div><div class="line">          <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">          <span class="keyword">const</span> a = resp.data.data.map(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</div><div class="line">            i.start = <span class="keyword">new</span> <span class="built_in">Date</span>(i.start)</div><div class="line">            i.end = <span class="keyword">new</span> <span class="built_in">Date</span>(i.end)</div><div class="line">            <span class="keyword">return</span> i</div><div class="line">          &#125;)</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">"resp"</span>,resp)</div><div class="line">          <span class="keyword">const</span> cmp = <span class="function">(<span class="params">a, b</span>) =&gt;</span> b.start - a.start</div><div class="line">          <span class="keyword">const</span> coming = a.filter(<span class="function"><span class="params">i</span> =&gt;</span> i.start &gt; now).sort(cmp).map(<span class="function"><span class="params">i</span> =&gt;</span> (i.statu = <span class="number">0</span>,i))</div><div class="line">          <span class="keyword">const</span> ing = a.filter(<span class="function"><span class="params">i</span> =&gt;</span> i.start &lt; now &amp;&amp; i.end &gt; now).sort(cmp).map(<span class="function"><span class="params">i</span> =&gt;</span> (i.statu = <span class="number">1</span>,i))</div><div class="line">          <span class="keyword">const</span> end = a.filter(<span class="function"><span class="params">i</span> =&gt;</span> i.end &lt; now).sort(cmp).map(<span class="function"><span class="params">i</span> =&gt;</span> (i.statu = <span class="number">2</span>,i))</div><div class="line">          <span class="keyword">const</span> items = [...ing, ...coming, ...end].map(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</div><div class="line">                                                    i.img = u + i.img</div><div class="line">                                                    i.time = util.formatTime(i.start)</div><div class="line">                                                    <span class="keyword">return</span> i</div><div class="line">                                                  &#125;)</div><div class="line">        </div><div class="line">          <span class="keyword">if</span> (items.length) &#123;</div><div class="line">            <span class="keyword">this</span>.setData(&#123;  <span class="attr">items</span>:that.data.items.concat(items), <span class="attr">loading</span>: <span class="literal">true</span> &#125;);</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">this</span>.setData(&#123; <span class="attr">hasMore</span>: <span class="literal">false</span>, <span class="attr">loading</span>: <span class="literal">false</span> &#125;);</div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">fail</span>: <span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e)</div><div class="line">      &#125;)</div></pre></td></tr></table></figure>
<p>活动列表的下拉加载遇到了一点坑。。</p>
<p>在wxml的代码里，需要对<code>scroll-view</code>给定一个固定的height，不然他不会有加载的效果，为了适配不同的分辨率，通过<code>wx.getSystemInfo</code>获取用户的窗口高度进行数据绑定。（WXML 中的动态数据均来自对应 Page 的 data）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">scroll-y</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"height:&#123;&#123;windowH&#125;&#125;px"</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">bindscrolltolower</span>=<span class="string">"handleLoadMore"</span> &gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"activity-box"</span>  <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;items&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"_id"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; item.img &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"img &#123;&#123; item.statu !== 1 ? 'mask' : '' &#125;&#125; &#123;&#123; item.statu === 0 ? 'coming' : '' &#125;&#125; &#123;&#123; item.statu === 2 ? 'end' : '' &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"block time"</span>&gt;</span>&#123;&#123; item.time &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123; hasMore &#125;&#125;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"../../image/loading.gif"</span> <span class="attr">mode</span>=<span class="string">"aspectFill"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>努力加载中_(:зゝ∠)_<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>没有更多内容了<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure>
<p>总而言之，跟vue有一点点像。。&amp;<del>朋神一直在吐槽小程序的api很蠢</del>。。。<em>(:зゝ∠)</em>….</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;喵~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;微信小程序是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。用完即走，适合场景化的问题。&lt;/p&gt;
&lt;p&gt;微信推了小程序之后大家对它的关注度一直很高。所
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>react-native android 在windows下的初体验</title>
    <link href="http://yoursite.com/2015/11/16/2015-11-16-react-native%20android%20%E5%9C%A8windows%E4%B8%8B%E7%9A%84%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2015/11/16/2015-11-16-react-native android 在windows下的初体验/</id>
    <published>2015-11-16T03:30:00.000Z</published>
    <updated>2016-11-24T14:26:33.379Z</updated>
    
    <content type="html"><![CDATA[<p>#react-native android 在windows下的初体验#</p>
<h2 id="需要的环境："><a href="#需要的环境：" class="headerlink" title="需要的环境："></a>需要的环境：</h2><ul>
<li>node 4.0以上 （我用的是node5.0）</li>
<li>JDK</li>
<li>android SDK</li>
</ul>
<h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><p><a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></p>
<h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>从<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">Java官网</a>选下载最新的JDK并安装</p>
<p>配好环境变量（这里就不赘述了）</p>
<p>配置完毕后，通过cmd运行以下命令：<code>java -version</code>，<code>javac</code> 如果出现返回信息，则设置成功。</p>
<h3 id="下载android-SDK"><a href="#下载android-SDK" class="headerlink" title="下载android SDK"></a>下载android SDK</h3><p>下载地址：<a href="http://developer.android.com/sdk/index.html" target="_blank" rel="external">http://developer.android.com/sdk/index.html</a></p>
<p>Andorid SDK为Android管理开发包工具，提供了Android各级平台的开发包和工具。注意，因为我们是独立安装，不是一体化(集成系列工具)所以需要单独下载SDK。</p>
<p>运行安装文件，并把安装目录下tools文件夹路径设置进PATH环境变量。</p>
<p>到安装目录运行SDK Manager.exe 。<br>把android 4.0以上的包和extra都装了。<br>（可能需要翻一下墙）</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><code>npm install -g react-native-cli</code></p>
<p><code>react-native init AwesomeProject</code></p>
<p><code>cd AwesomeProject/</code></p>
<h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p><code>react-native start</code> </p>
<p>运行成功后，打开另一个命令行窗口，</p>
<p><code>cd AwesomeProject</code></p>
<p>连接好安卓模拟器或者真机（要android5.0以上，不然运行之后会出现Error Type 3）</p>
<p>因为我的安卓模拟器（AVD）超级卡，原先是勾选了Use Host GPU，模拟器启动会加快，但是后来不知道为什么模拟器启动后会自动黑屏。取消勾选Use Host GPU之后模拟器又启动不了，于是我就把自己的小米2s刷成了android 5.0 <em>(:зゝ∠)</em>。</p>
<p>然后</p>
<p><code>adb devices</code></p>
<p>查看自己是否连接上安卓设备，确定连接上后</p>
<p><code>react-native run-android</code></p>
<p>这个时候记得打开你的VPN。。</p>
<p>如果出现了unable to download js bundle，也就是不能reload js，可以尝试<br><code>adb reverse tcp:8081 tcp:8081</code></p>
<p>如果还是不行的话，你可以尝试这篇文章的方法<br><a href="http://www.cnblogs.com/unofficial/p/4843734.html" target="_blank" rel="external">http://www.cnblogs.com/unofficial/p/4843734.html</a></p>
<p>最后的最后，终与可以在手机上看到这个应用啦。</p>
<p>然后你就可以在选定的文本编辑器中打开 index.android.js 并且编辑代码。</p>
<p>摇晃手机或者按菜单键，可以看到reload JS。点击，即可看到修改之后的样子。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>QAQ自带bug体质，几乎每一个坑都踩到了。GFW真是太烦了，下载东西超慢。QAQ。然后在sdk manager下载东西的时候出现了下载了好久最后没有下载下来的情况，<br>好在舍友在玩安卓，从他那儿复制了extra的整个包才得以继续。还有一个坑就是在手机上安装完之后出现了红色的页面，就是不能reload js，谷歌百度之后尝试了各种方法，最后才跑了起来。<br>QAQ痛心疾首，感觉下一台电脑必须是mac了。<br>_(:зゝ∠)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#react-native android 在windows下的初体验#&lt;/p&gt;
&lt;h2 id=&quot;需要的环境：&quot;&gt;&lt;a href=&quot;#需要的环境：&quot; class=&quot;headerlink&quot; title=&quot;需要的环境：&quot;&gt;&lt;/a&gt;需要的环境：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;node
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于impress.js的学习小结</title>
    <link href="http://yoursite.com/2015/09/22/2015-09-22-%E5%85%B3%E4%BA%8Eimpress.js%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2015/09/22/2015-09-22-关于impress.js的学习小结/</id>
    <published>2015-09-21T16:40:03.000Z</published>
    <updated>2016-11-26T07:37:48.822Z</updated>
    
    <content type="html"><![CDATA[<p>因为工作室要办宣讲会 打算用impress.js做几个ppt</p>
<p>所以我就临时的学了一下 边做边学</p>
<p>感觉这个东西的难点大概就是对三维空间的利用吧 </p>
<p>标准格式如下</p>
<p><code>&lt;div class=&quot;step&quot; data-属性=&quot;500&quot; data-y=&quot;-400&quot;&gt;</code></p>
<h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><p><code>data-x data-y data-z</code> 定义元素中心在画布的坐标，默认为0 。</p>
<p><code>data-scale = &quot;5&quot;</code> 这个元素就会被放大成原来的5倍。如果从这个场景退出，它会被还原原来的大小（缩小5倍）。</p>
<p><code>data-rotate = &quot;360&quot;</code>顺时针旋转360度</p>
<p><code>data-rotate-x = &quot;100&quot;</code> 绕x轴旋转100度。</p>
<p><code>data-rotate-y = &quot;100&quot;</code> 绕y轴旋转100度。</p>
<p><code>data-rotate-z = &quot;100&quot;</code> 绕z轴旋转100度。</p>
<p><code>data-transition-duration=&quot;2000&quot;</code> 改变切换场景的速度，默认的话是1000（也就是1秒）。</p>
<p><code>data-perspective=&quot;500&quot;</code>来改变透视的深度，默认是1000。</p>
<h4 id="还需要使用-impress-init-函数来初始化impress-js"><a href="#还需要使用-impress-init-函数来初始化impress-js" class="headerlink" title="还需要使用 impress().init() 函数来初始化impress.js"></a>还需要使用 <code>impress().init()</code> 函数来初始化impress.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;js/impress.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;impress().init()&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>如果空间布局合理的话 最后用</p>
<p><code>&lt;div id=&quot;overview&quot; class=&quot;step&quot; data-x=&quot;3000&quot; data-y=&quot;1500&quot; data-scale=&quot;10&quot;&gt;</code></p>
<p>会有很酷炫的效果</p>
<p>也可以使用GUI工具<a href="https://github.com/tantaman/Strut" target="_blank" rel="external">Strut</a>进行可视化的制作…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为工作室要办宣讲会 打算用impress.js做几个ppt&lt;/p&gt;
&lt;p&gt;所以我就临时的学了一下 边做边学&lt;/p&gt;
&lt;p&gt;感觉这个东西的难点大概就是对三维空间的利用吧 &lt;/p&gt;
&lt;p&gt;标准格式如下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;step
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sublime的一些常用快捷键</title>
    <link href="http://yoursite.com/2015/08/09/2015-08-09-%E5%85%B3%E4%BA%8Esublime%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2015/08/09/2015-08-09-关于sublime的一些快捷键/</id>
    <published>2015-08-08T17:07:03.000Z</published>
    <updated>2016-11-24T14:27:52.574Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><code>Alt</code>：调出菜单</li>
<li><code>Ctrl + Shift + P</code>：调出命令板（Command Palette）</li>
<li><code>Ctrl + ` </code>：调出控制台<br><br></li>
<li><code>Shift+右键拖动</code>：多光标，用来更改或插入列内容</li>
<li><code>Ctrl + Enter</code>：在当前行下面新增一行然后跳至该行</li>
<li><code>Ctrl + Shift + Enter</code>：在当前行上面增加一行并跳至该行</li>
<li><code>Ctrl + ←/→</code>：进行逐词移动</li>
<li><code>Ctrl + Shift + ←/→</code>:进行逐词选择</li>
<li><code>Ctrl + ↑/↓</code>:移动当前显示区域</li>
<li><code>Ctrl + L</code>：选择当前行</li>
<li><code>Ctrl + Shift + ↑/↓</code>：移动当前行<br><br></li>
<li><code>Ctrl + D</code>：选择当前光标所在的词并高亮该词所有出现的位置，再次Ctrl + D选择该词出现的下一个位置</li>
<li><code>F3</code>：跳至当前关键字下一个位置</li>
<li><code>Shift + F3</code>：跳到当前关键字上一个位置</li>
<li><code>Alt+F3</code>：选择所有相同的词<br><br></li>
<li><code>Ctrl + Shift + L</code>：将当前选中区域打散</li>
<li><code>Ctrl + J</code>：把当前选中区域合并为一行</li>
<li><code>Ctrl + M</code>：在起始括号和结尾括号间切换</li>
<li><code>Ctrl + Shift + Space</code>：快速选择当前作用域的内容<br><br></li>
<li><code>Ctrl + F/H</code>：进行标准查找/替换，之后：<ul>
<li><code>Alt + C</code>：切换大小写敏感（Case-sensitive）模式</li>
<li><code>Alt + W</code>：切换整字匹配（Whole matching）模式</li>
<li><code>Alt + R</code>：切换正则匹配（Regex matching）模式</li>
<li><code>Ctrl + Shift + H</code>：替换当前关键字</li>
<li><code>Ctrl + Alt + Enter</code>：替换所有关键字匹配</li>
<li><code>Ctrl + Shift + F</code>：多文件搜索&amp;替换<br><br></li>
</ul>
</li>
<li><code>Ctrl + P</code>：跳转到指定文件，输入文件名后可以：<ul>
<li><code>@</code> :符号跳转：输入@symbol跳转到symbol符号所在的位置<ul>
<li><code>#</code> :关键字跳转：输入#keyword跳转到keyword所在的位置</li>
<li><code>:</code> :行号跳转：输入:12跳转到文件的第12行。</li>
</ul>
</li>
</ul>
</li>
<li><code>Ctrl + R</code>：跳转到指定符号</li>
<li><code>Ctrl + G</code>：跳转到指定行号<br><br></li>
<li><code>Ctrl+Tab</code> 按文件浏览过的顺序，切换当前窗口的标签页。</li>
<li><code>Ctrl+PageDown</code> 向左切换当前窗口的标签页。</li>
<li><code>Ctrl+PageUp</code> 向右切换当前窗口的标签页。</li>
<li><code>Alt+Shift+1</code> 窗口分屏，恢复默认1屏（非小键盘的数字）</li>
<li><code>Alt+Shift+2</code> 左右分屏-2列</li>
<li><code>Alt+Shift+3</code> 左右分屏-3列</li>
<li><code>Alt+Shift+4</code> 左右分屏-4列</li>
<li><code>Alt+Shift+5</code> 等分4屏</li>
<li><code>Alt+Shift+8</code> 垂直分屏-2屏</li>
<li><code>Alt+Shift+9</code> 垂直分屏-3屏<br>分屏之后，使用Ctrl + 数字键跳转到指定屏，使用Ctrl + Shift + 数字键将当前屏移动到指定屏</li>
<li><code>Ctrl+K+B</code> 开启/关闭侧边栏。</li>
<li><code>F11</code> 全屏模式</li>
<li><code>Shift+F11</code> 免打扰模式 </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alt&lt;/code&gt;：调出菜单&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + P&lt;/code&gt;：调出命令板（Command Palette）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + ` &lt;/code&gt;：调出控制台&lt;br&gt;&lt;br&gt;&lt;/
    
    </summary>
    
    
  </entry>
  
</feed>
