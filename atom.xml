<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lizimeow&#39;s blog</title>
  <subtitle>随手记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-25T09:24:30.329Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lizimeow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RxJS 学习之常用的 operators</title>
    <link href="http://yoursite.com/2017/05/25/2017-05-25-%20RxJS%20%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%B8%B8%E7%94%A8%E7%9A%84%20operators/"/>
    <id>http://yoursite.com/2017/05/25/2017-05-25- RxJS 学习之常用的 operators/</id>
    <published>2017-05-25T02:00:00.000Z</published>
    <updated>2017-05-25T09:24:30.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Operators-一"><a href="#Operators-一" class="headerlink" title="Operators (一)"></a>Operators (一)</h2><p><strong>take(n)</strong></p>
<p>取前n个元素</p>
<p><strong>first()</strong></p>
<p>first 会取 observable 送出的第一个元素之后就结束，相当于take(1)</p>
<p><strong>takeUntil( observable )</strong></p>
<p>在某件事情发生时，让一个 observable 直接发出完成信息，例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>)</div><div class="line"><span class="keyword">var</span> click = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>)</div><div class="line"><span class="keyword">var</span> example = source.takeUntil(click) <span class="comment">//当点击时，结束sourse事件</span></div><div class="line">example.subscrible(&#123;</div><div class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(value),</div><div class="line">  <span class="attr">error</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'err'</span>,err),</div><div class="line">  <span class="attr">complete</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'done'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="拖拽实例"><a href="#拖拽实例" class="headerlink" title="拖拽实例"></a>拖拽实例</h3><ol>
<li><p>在页面上画一个box (#box)</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*&lt;div id="box"&gt;&lt;/div&gt;*/</span></div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#box</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(1,1,1,0.2);</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">cursor</span>: all-scroll;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>获取要监听的 DOM 元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'#box'</span>)</div><div class="line"><span class="keyword">const</span> body = <span class="built_in">document</span>.body</div></pre></td></tr></table></figure>
<p>监听 box 上的 mousedown ，监听 body 上的 mousemove 和 mouseup </p>
</li>
<li><p>用 <code>fromEvent</code> 来取得各个的 observable</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mouseDown = Rx.Observable.fromEvent(box, <span class="string">'mousedown'</span>)</div><div class="line"><span class="keyword">const</span> mouseMove = Rx.Observable.fromEvent(body, <span class="string">'mousemove'</span>)</div><div class="line"><span class="keyword">const</span> mouseUp = Rx.Observable.fromEvent(body, <span class="string">'mouseup'</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>还没 subscribe 之前都不会开始监听，直到 subscribe 之后 observable 才会开始送值</p>
</blockquote>
<ol>
<li><p>当鼠标在元素 (#box) 上按下左键 (mousedown) 时，开始监听鼠标移动 (mousemove) 的位置；当鼠标左键放掉(mouseup)時，结束监听鼠标移动；当鼠标移动(mousemove)被监听时，修改元素的样式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mouseDown</div><div class="line">  .map(<span class="function"><span class="params">e</span> =&gt;</span> mouseMove.takeUntil(mouseUp)) <span class="comment">//当 mouseDown 时，转成 mouseMove 事件</span></div><div class="line">  .concatAll()</div><div class="line">  .map(<span class="function"><span class="params">e</span> =&gt;</span> (&#123;<span class="attr">x</span>:e.clientX, <span class="attr">y</span>:e.clientY&#125;)) <span class="comment">//用 map 把 mousemove event 转成 x,y 的位置</span></div><div class="line">  .subscribe(<span class="function"><span class="params">pos</span> =&gt;</span> &#123;</div><div class="line">    box.style.left = pos.x - <span class="number">40</span> + <span class="string">'px'</span></div><div class="line">    box.style.top = pos.y - <span class="number">40</span> + <span class="string">'px'</span></div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Operators-二"><a href="#Operators-二" class="headerlink" title="Operators (二)"></a>Operators (二)</h2><p> <strong>skip(n)</strong></p>
<p>略过前n个元素</p>
<p> <strong>takeLast(n)</strong></p>
<p>take 取前几个，takeLast 取最后几个。 takeLast 必须等到整个 observable 完成(complete)，才能知道最后的元素有哪些，並且<strong>同步送出</strong>，如果用 Marble Diagram 表示如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : ----0----1----2----3----4----5|</div><div class="line">                takeLast(2)</div><div class="line">example: ------------------------------(45)|</div></pre></td></tr></table></figure>
<p> <strong>last()</strong></p>
<p>跟 <code>take(1)</code> 相同，我們有一个 <code>takeLast(1)</code> 的简化写法，就是 <code>last()</code> 用來取最后一个元素</p>
<p><strong>concat</strong></p>
<p><code>concat</code> 可以把多個 observable 实例合并成一个</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>).take(<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> source2 = Rx.Observable.of(<span class="number">3</span>)</div><div class="line"><span class="keyword">var</span> source3 = Rx.Observable.of(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div><div class="line"><span class="keyword">var</span> example = source.concat(source2, source3);</div><div class="line"><span class="comment">//concat 也可以当做静态方法</span></div><div class="line"><span class="comment">//var example = Rx.Observable.concat(source, source2, source3);</span></div></pre></td></tr></table></figure>
<p>跟 concatAll 一样，必须等前一个 observable <strong>完成 ( complete ) </strong>，才会继续下一个</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">source : ---<span class="number">-0</span>---<span class="number">-1</span>---<span class="number">-2</span>|</div><div class="line">source2: (<span class="number">3</span>)|</div><div class="line">source3: (<span class="number">456</span>)|</div><div class="line">            concat()</div><div class="line">example: ---<span class="number">-0</span>---<span class="number">-1</span>---<span class="number">-2</span>(<span class="number">3456</span>)|</div></pre></td></tr></table></figure>
<p><strong>startWith</strong></p>
<p>startWith 可以在 observable 的最开始加入要发送的元素，有点像 concat ，但参数不是 observable ，而是要发送的元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : ---<span class="number">-0</span>---<span class="number">-1</span>---<span class="number">-2</span>---<span class="number">-3</span>--...</div><div class="line">                startWith(<span class="number">0</span>)</div><div class="line">example: (<span class="number">0</span>)---<span class="number">-0</span>---<span class="number">-1</span>---<span class="number">-2</span>---<span class="number">-3</span>--...</div></pre></td></tr></table></figure>
<p><code>startWith</code> 的值时一开始就同步发出，这个 operator 经常用来<strong>保存程序的起始状态</strong></p>
<p><strong>merge</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">500</span>).take(<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> source2 = Rx.Observable.interval(<span class="number">300</span>).take(<span class="number">6</span>);</div><div class="line"><span class="keyword">var</span> example = source.merge(source2);</div><div class="line"><span class="comment">//也可以 var example = Rx.Observable.merge(source, source2)</span></div><div class="line">example.subscribe(&#123;</div><div class="line">    <span class="attr">next</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    <span class="attr">error</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    <span class="attr">complete</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 5</span></div><div class="line"><span class="comment">// complete</span></div></pre></td></tr></table></figure>
<p>由上面的例子可以看出来，<code>merge</code> 把多个 observable 同时处理，也就是按照<strong>时间顺序</strong>处理，这跟 <code>concat</code> 一次处理一个 observable 是完全不一样的，merge 的 Marble Diagram 如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">source : ---<span class="number">-0</span>---<span class="number">-1</span>---<span class="number">-2</span>|</div><div class="line">source2: -<span class="number">-0</span>-<span class="number">-1</span>-<span class="number">-2</span>-<span class="number">-3</span>-<span class="number">-4</span>-<span class="number">-5</span>|</div><div class="line">            merge()</div><div class="line">example: -<span class="number">-0</span><span class="number">-01</span>-<span class="number">-21</span><span class="number">-3</span>--(<span class="number">24</span>)-<span class="number">-5</span>|</div></pre></td></tr></table></figure>
<p>merge 的 逻辑有点像 or(||) ，就是当两个 observable 其中一个被触发时都可以被处理，这很常用在一个以上的按钮具有部分相同的行为。例如，一个视频播放器有两个按钮，一个是暂停，一个是结束。这两个按钮的相同行为就是视频会被暂停，只是结束会让视频回到 00 秒。这时我们就可以把这两个按钮的事件 merge 起来处理视频暂停这件事。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> stopVideo = Rx.Observable.merge(stopButton, endButton)</div><div class="line">stopVidep.subScribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">//暂停</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="operators-三-—合并"><a href="#operators-三-—合并" class="headerlink" title="operators(三) —合并"></a>operators(三) —合并</h2><p><strong>combineLatest</strong></p>
<p><code>combineLatest</code> 会取得各个 observable <strong>最后</strong> 送出的值，再输出成一个值，栗子如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">500</span>).take(<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> newest = Rx.Observable.interval(<span class="number">300</span>).take(<span class="number">6</span>);</div><div class="line"><span class="keyword">var</span> example = source.combineLatest(newest, (x, y) =&gt; x + y);</div></pre></td></tr></table></figure>
<p>Marble Diagram 如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">source : ---<span class="number">-0</span>---<span class="number">-1</span>---<span class="number">-2</span>|</div><div class="line">newest : -<span class="number">-0</span>-<span class="number">-1</span>-<span class="number">-2</span>-<span class="number">-3</span>-<span class="number">-4</span>-<span class="number">-5</span>|</div><div class="line"></div><div class="line">    combineLatest(newest, (x, y) =&gt; x + y);</div><div class="line"></div><div class="line">example: ---<span class="number">-01</span>-<span class="number">-23</span><span class="number">-4</span>--(<span class="number">56</span>)-<span class="number">-7</span>|</div></pre></td></tr></table></figure>
<p><code>comblineLatest</code>可以接收多个 observable ，最后一个参数是 callback function ，这个callback function 接收的参数数量跟合并的 observable 数量相同，依照范例来说，因为我们这里合并了两个 observable ，所有后面的 callback function 就接收 x,y 两个参数，x 会接收从 source 发出来的值，y 会接收从 newest 发送出来的值。 </p>
<p><strong>最后一个重点是，一定会等两个 observable <u>都有送值</u>出来才会调用 callback！！</strong> ，所以这段程序是这样运行的：</p>
<ul>
<li>newest 送出了 0 ，此时source 没有送出任何值，所以不执行callback</li>
<li>source 送出了 0 ，此时 newest 最后一次送出的值为 0 ， 把这两个数传入 callback 得到 0</li>
<li>newest 送出了 1 ，此时 source 最后一次的送出值为 0 ，得到 1</li>
<li>newest 送出了 2 ，此时 source 最后一次的送出值为 0 ，得到 2</li>
<li>source 送出了 1 ，此时 newest 最后一次送出的值为 2 ，得到 3</li>
<li>newest 送出了 3 ，此时 source 最后一次的送出值为 1 ，得到 4</li>
<li>source 送出了 2 ，此时 newest 最后一次的送出值为 3 ，得到 5</li>
<li>newest 送出了 4 ，此时 source 最后一次的送出值为 2 ，得到 6</li>
<li>newest 送出了 5 ，此时 source 最后一次的送出值为 2 ，得到 7</li>
<li>newest 結束，因为 source 也结束了，所以 全部结束。</li>
</ul>
<p>不管是 source 还是 newest 产生了值，只要另一方曾有值(最后的值)，就会执行 callback 并送出新的值。这就是<code>combineLatest</code></p>
<p><code>combineLatest</code> 常用在运算多个因子的结果，如最常见的 BMI 计算，我们身高变动时就拿上一次的体重计算新的 BMI ，当体重变动时则拿上一次的身高计算 BMI , 这就很适合用 combineLatest 来处理</p>
<p><strong>zip</strong></p>
<p>zip会取每个<strong>相同位置</strong>的元素并传入 callback ，也就是说每个 observable 的第n个元素会一起被传入 callback 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">500</span>).take(<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> newest = Rx.Observable.interval(<span class="number">300</span>).take(<span class="number">6</span>);</div><div class="line"><span class="keyword">var</span> example = source.zip(newest, (x, y) =&gt; x + y);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">source : ---<span class="number">-0</span>---<span class="number">-1</span>---<span class="number">-2</span>|</div><div class="line">newest : -<span class="number">-0</span>-<span class="number">-1</span>-<span class="number">-2</span>-<span class="number">-3</span>-<span class="number">-4</span>-<span class="number">-5</span>|</div><div class="line">    zip(newest, (x, y) =&gt; x + y)</div><div class="line">example: ---<span class="number">-0</span>---<span class="number">-2</span>---<span class="number">-4</span>|</div></pre></td></tr></table></figure>
<p>过程如下：</p>
<ul>
<li>newest 送出第一个值为0，此时 source 没有送出第一个值，所以不会执行 callback </li>
<li>source 送出第一个值为0，newest 之前的第一个值是 0，所以执行 callback，得到0</li>
<li>newest 送出第二个值为1，此时 source 没有送出第二个值，所以不会执行 callback </li>
<li>newest 送出第三个值为2，此时 source 没有送出第二个值，所以不会执行 callback </li>
<li>source 送出第二个值为1， newest 之前的第二个值是 1，所以执行 callback ，得到2</li>
<li>newest 送出第四个值为3，此时 source 没有送出第四个值，所以不会执行 callback </li>
<li>source 送出第三个值为2， newest 之前的第三个值是 2，所以执行 callback ，得到4</li>
<li>source 结束 example 就直接结束，因为 source 跟 newest 不会再有对应位置的值</li>
</ul>
<blockquote>
<p>建议平时不要乱用 zip ，除非真的需要。因为 zip 必须 cache 没处理的元素，当两个 observable 一个快一个慢时会 cache 非常多元素。有可能造成内存相关的问题</p>
</blockquote>
<p><strong>withLatestFrom</strong></p>
<p>withLatestFrom 的运作方式跟 combineLatest 有点像，只是他有主从关系，只有在<strong>主要的 observable 送出新值时</strong>， 才会执行callback， 另一个 observable 只是在背景下运行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> main = Rx.Observable.from(<span class="string">'hello'</span>).zip(Rx.Observable.interval(<span class="number">500</span>), (x, y) =&gt; x);</div><div class="line"><span class="keyword">var</span> some = Rx.Observable.from([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]).zip(Rx.Observable.interval(<span class="number">300</span>), (x, y) =&gt; x);</div><div class="line"><span class="keyword">var</span> example = main.withLatestFrom(some, (x, y) =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> y === <span class="number">1</span> ? x.toUpperCase() : x;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Marble Diagram</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">main   : ----h----e----l----l----o|</div><div class="line">some   : -<span class="number">-0</span>-<span class="number">-1</span>-<span class="number">-0</span>-<span class="number">-0</span>-<span class="number">-0</span>-<span class="number">-1</span>|</div><div class="line"></div><div class="line">withLatestFrom(some, (x, y) =&gt;  y === <span class="number">1</span> ? x.toUpperCase() : x);</div><div class="line"></div><div class="line">example: ----h----e----l----L----O|</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Operators-一&quot;&gt;&lt;a href=&quot;#Operators-一&quot; class=&quot;headerlink&quot; title=&quot;Operators (一)&quot;&gt;&lt;/a&gt;Operators (一)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;take(n)&lt;/strong&gt;&lt;/p&gt;
&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RxJS 从入门到入门</title>
    <link href="http://yoursite.com/2017/05/17/2017-05-17-%20RxJS%20%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/05/17/2017-05-17- RxJS 从入门到入门/</id>
    <published>2017-05-17T10:00:00.000Z</published>
    <updated>2017-05-18T08:14:11.121Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>RxJS 入门要知道的基础知识</p>
</blockquote>
<p>RxJS 是一个由 <strong>Observable sequences</strong> 來组合<strong>非同步行为</strong>和<strong>事件基础</strong>程序的库</p>
<p>RxJS 提供了一套完整的非同步解决方案，让我们在面对各种非同步操作时，不管是 Event, AJAX, 还是Animation 等，都可以使用相同的 API 进行操作</p>
<p>這也被称为 Functional Reactive Programming，更确切的说是指 Functional Programming 及 Reactive Programming 两个编程思想的结合。</p>
<h3 id="Functional-Programming-重要特性"><a href="#Functional-Programming-重要特性" class="headerlink" title="Functional Programming  重要特性"></a>Functional Programming  重要特性</h3><p>函数式编程都是<strong>表达式（expression） </strong>不会是陈述式（statement）</p>
<ul>
<li>表达式是一个运算过程，一定会有返回值，例如执行一个function <code>add(1,2)</code></li>
<li>陈述式则是表现某个行为，譬如赋值给变量<code>a = 1;</code></li>
</ul>
<p><strong>Pure function 是指 给一个 function 相同的参数，永远会返回相同的返回值，并且沒有任何副作用(Side Effect)</strong></p>
<p>前端常见的side effect：</p>
<ul>
<li>发送http request</li>
<li>在画面印出值或者log</li>
<li>获得用户的input</li>
<li>查询 DOM 对象</li>
</ul>
<h3 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h3><p>Observalue 可以被订阅（subscribe），订阅 Observalue 的对象又称为观察者（observer）。观察者是一个具有三个方法的对象，每当 Observable 发生事件时，观察者便会调用相对应的方法</p>
<p><strong>觀察者的三個方法(method)：</strong></p>
<ul>
<li>next：每当 Observable 发出新的值时，next 方法就会被调用</li>
<li>complete：当 Observable 没有其他的值可以取时，complete 方法就会被调用，complete 调用之后，next 方法不会再起作用</li>
<li>error：每当 Observable 发生错误时</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> observable = Rx.Observable</div><div class="line">	.create(<span class="function">(<span class="params">observer</span>)=&gt;</span>&#123;</div><div class="line">      observer.next(<span class="string">'Jerry'</span>)</div><div class="line">      observer.next(<span class="string">'Anna'</span>)</div><div class="line">      observer.complete()</div><div class="line">      observer.next(<span class="string">'not work'</span>)</div><div class="line">	&#125;)</div><div class="line"><span class="comment">//定义一个观察者，具备三个方法</span></div><div class="line"><span class="keyword">var</span> observer = &#123;</div><div class="line">  <span class="attr">next</span>: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(value)</div><div class="line">  &#125;</div><div class="line">  error: <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(error)</div><div class="line">  &#125;</div><div class="line">  complete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'complete'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//用定义好的观察者来订阅这个observable</span></div><div class="line">observable.subscribute(observer)</div><div class="line"><span class="comment">//结果会输出</span></div><div class="line"><span class="comment">/*Jerry</span></div><div class="line">Anna</div><div class="line">complete*/</div></pre></td></tr></table></figure>
<p>观察者可以是不完整的，可以只具有一个next方法</p>
<p>也可以直接把三个方法按顺序传入</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(</div><div class="line">    <span class="function"><span class="params">value</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span>, error); &#125;,</div><div class="line">    () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>) &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="Observable-创建实例的几个常用方法"><a href="#Observable-创建实例的几个常用方法" class="headerlink" title="Observable 创建实例的几个常用方法"></a>Observable 创建实例的几个常用方法</h3><ul>
<li><p>create</p>
<p>同上</p>
</li>
<li><p>of</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这个参数是一个list</span></div><div class="line"><span class="keyword">var</span> sourse = Rx.Observable.of(<span class="string">'Jerry'</span>, <span class="string">'Anna'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>from</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'Jerry'</span>, <span class="string">'Anna'</span>, <span class="number">2016</span>, <span class="number">2017</span>, <span class="string">'30 days'</span>] </div><div class="line"><span class="keyword">var</span> sourse = Rx.Observable.from(arr)</div><div class="line"><span class="comment">//这个参数可以是Array, Set, WeakSet, Iterator ,String, Promise 等..  </span></div><div class="line"><span class="comment">//如果是字符串的话，会把字符串里的字符一个个读取</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//传入 Promise 实例，当正常回传 (resolve) 会传入 next，有错误 (reject) 就传到 error</span></div><div class="line"><span class="keyword">var</span> source = Rx.Observable</div><div class="line">  .from(<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; <span class="comment">//這裡的 form 也可以改成 fromPromise ，結果相同</span></div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      resolve(<span class="string">'Hello RxJS!'</span>);</div><div class="line">    &#125;,<span class="number">3000</span>)</div><div class="line">  &#125;))</div></pre></td></tr></table></figure>
</li>
<li><p>fromEvent</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>)</div><div class="line"><span class="comment">//第一个参数是 DOM 元素，第二个参数是要监听的事件名称</span></div></pre></td></tr></table></figure>
</li>
<li><p>fromEventPattern</p>
</li>
<li><p>empty</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.empty();</div><div class="line"><span class="comment">//empty 會給我們一個空的 observable，如果我們訂閱這個 observable ,會立即送出 complete 的訊息！</span></div></pre></td></tr></table></figure>
</li>
<li><p>never</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.never();</div><div class="line"><span class="comment">//never 會給我們一個無窮的 observable，如果我們訂閱它则...什麼事都不會發生，它就是一個一直存在但卻什麼都不做的 observable</span></div></pre></td></tr></table></figure>
</li>
<li><p>throw</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.throw(<span class="string">'Oop!'</span>);</div><div class="line"><span class="comment">//抛错误</span></div></pre></td></tr></table></figure>
</li>
<li><p>interval</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>);</div><div class="line"><span class="comment">//interval 有一個参数必须是数值(Number)，這个数值代表发出讯号的间隔时间(ms)。</span></div><div class="line"><span class="comment">//这段程序会持续每隔一秒发出一個从0开始递增的数值</span></div></pre></td></tr></table></figure>
</li>
<li><p>timer</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.timer(<span class="number">1000</span>, <span class="number">5000</span>);</div><div class="line"><span class="comment">//第一个参数代表发出第一个值等待的时间(ms)，第二个参数表示第一次之后发送值的时间间隔，所以上面这段程序会先等1s送出0之后，每隔5s送出1,2,3,4,5....</span></div><div class="line"><span class="comment">//timer的第一个参数还可以是日期(Date)，就会等到指定的时间再发送第一个值</span></div><div class="line"><span class="comment">//也可以只接受一个参数，等一秒送出0同时结束通知</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Sbuscription"><a href="#Sbuscription" class="headerlink" title="Sbuscription"></a>Sbuscription</h3><p>在订阅 observable 之后，会返回一个 subscription 对象，这个对象具有释放资源的 unsubscribe 方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.timer(<span class="number">1000</span>, <span class="number">1000</span>)</div><div class="line"><span class="keyword">var</span> subscription = source.subscribe(&#123;</div><div class="line">  <span class="attr">next</span>: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(value)</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">complete</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'complete'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  subscription.unsubscribe()</div><div class="line">&#125;, <span class="number">5000</span>)</div><div class="line"><span class="comment">//0</span></div><div class="line"><span class="comment">//1</span></div><div class="line"><span class="comment">//2</span></div><div class="line"><span class="comment">//3</span></div><div class="line"><span class="comment">//4</span></div></pre></td></tr></table></figure>
<p>Events observable 盡量不要用 <code>unsubscribe</code> ，通常我們會使用 <code>takeUntil</code>，在某個事件發生後來完成 Event observable</p>
<h3 id="operator"><a href="#operator" class="headerlink" title="operator"></a>operator</h3><p>operators 就是一个个被附加到 Observable 对象的函数，像map, filter… 等等。这些函数会收到原本的observable 并回传一个新的 observable</p>
<ul>
<li><strong>map</strong></li>
</ul>
<ul>
<li><strong>filter</strong></li>
<li><strong>mapTo</strong> 可以把傳進來的值改成一個固定的值</li>
<li>………..</li>
<li><a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/libraries/main/rx.md" target="_blank" rel="external">更多</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>);</div><div class="line"><span class="keyword">var</span> newest = source.mapTo(<span class="number">2</span>); </div><div class="line">newest.subscribe(<span class="built_in">console</span>.log);</div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 2..</span></div></pre></td></tr></table></figure>
<h3 id="Marble-diagrams"><a href="#Marble-diagrams" class="headerlink" title="Marble diagrams"></a>Marble diagrams</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>);</div><div class="line"><span class="keyword">var</span> newest = source.map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>這時 Marble diagrams 就會長像這樣</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source: -----0-----1-----2-----3--...</div><div class="line">	map(x =&gt; x + 1)</div><div class="line">newest: -----1-----2-----3-----4--...</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;RxJS 入门要知道的基础知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;RxJS 是一个由 &lt;strong&gt;Observable sequences&lt;/strong&gt; 來组合&lt;strong&gt;非同步行为&lt;/strong&gt;和&lt;strong&gt;事件基础&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端模块化</title>
    <link href="http://yoursite.com/2017/04/01/2017-04-01-%20%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://yoursite.com/2017/04/01/2017-04-01- 前端模块化/</id>
    <published>2017-04-01T12:00:00.000Z</published>
    <updated>2017-05-14T05:37:54.423Z</updated>
    
    <content type="html"><![CDATA[<p>为了更好的管理网页的业务逻辑，产生了模块化编程的理念。</p>
<p>常用的 JavaScript 的模块化规范有 CommonJS 、 AMD 、CMD</p>
<h3 id="CommonJS-规范"><a href="#CommonJS-规范" class="headerlink" title="CommonJS 规范"></a>CommonJS 规范</h3><blockquote>
<p>服务器端的 Node.js 遵循 CommonJS 规范</p>
</blockquote>
<p>CommonJS定义的模块分为:<code>模块引用(require)</code>  <code>模块定义(exports)</code>  <code>模块标识(module)</code> </p>
<p><code>require()</code>用来引入外部模块，该方法读取一个文件并执行，最后返回文件内部的 <code>exports</code> 对象；<code>exports</code>对象用于导出当前模块的方法或变量，唯一的导出口；一个单独的文件就是一个模块，<code>module</code>对象就代表模块本身。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">"moduleA"</span>)</div><div class="line"><span class="built_in">require</span>(<span class="string">"../file.js"</span>)</div><div class="line">exports.func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="built_in">module</span>.exports = moduleB</div></pre></td></tr></table></figure>
<p><strong>优点</strong></p>
<p>CommonJS 规范加载模块是<strong>同步</strong>的，只有加载完成，才能执行后面的操作。这种写法适合服务端，因为在服务器读取模块都是在本地磁盘，加载速度很快。</p>
<p><strong>缺点</strong></p>
<p>如果在客户端，加载模块的时候有可能出现“假死”状况。不能非阻塞的并行加载多个模块</p>
<h3 id="AMD-规范"><a href="#AMD-规范" class="headerlink" title="AMD 规范"></a>AMD 规范</h3><blockquote>
<p>异步模块定义规范，依赖前置，适用于客户端环境，并且能兼容服务器端模块的一种模块规范</p>
</blockquote>
<p>AMD 其实只有一个主要接口 <code>define(id?, dependenncies?, factory)</code>，要在声明模块的时候指定所有的依赖<code>dependencies</code>，依赖作为形参传到<code>factory</code>中，对于依赖的模块提前执行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">"moduleA"</span>, [<span class="string">"dep1"</span>, <span class="string">"dep2"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">d1, d2</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> someExportedValue;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>AMD也用<code>require()</code>语句来加载模块，但是他要求有两个参数<code>require([module], callback)</code></p>
<p>第一个参数是一个数组，里面的成员就是要加载的模块，第二个参数callback，则是加载成功之后的回调函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'package/moduleA'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">moduleA</span>) </span>&#123;</div><div class="line">  moduleA.add(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">&#125;)</div><div class="line"><span class="comment">//modleA.add()与moduleA模块加载不是同步的,十分适合浏览器的环境</span></div></pre></td></tr></table></figure>
<p><strong>优点</strong></p>
<p>AMD 运行时核心思想是「Early Executing」，也就是提前执行依赖，提前执行依赖通常可以带来更好的用户体验，也可以尽早发现错误</p>
<p>适合在浏览器环境中异步加载模块，可以并行加载多个模块</p>
<p><strong>缺点</strong></p>
<p>若提前执行的依赖未被使用，就浪费了带宽和内存开销</p>
<p>不符合通用的模块化思维方式，是一种妥协的实现</p>
<h3 id="CMD-规范"><a href="#CMD-规范" class="headerlink" title="CMD 规范"></a>CMD 规范</h3><blockquote>
<p>通用模块定义规范，依赖就近，用的时候再require ，异步加载模块</p>
</blockquote>
<p>CMD 和 AMD 很相似</p>
<p>AMD和CMD最大的区别是对依赖模块的执行时机处理不同，AMD 是提前执行，CMD 是延迟执行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</div><div class="line">  <span class="keyword">var</span> Spinning = <span class="built_in">require</span>(<span class="string">'./spinning'</span>);</div><div class="line">  exports.doSomething = ...</div><div class="line">  module.exports = ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="ES6-模块"><a href="#ES6-模块" class="headerlink" title="ES6 模块"></a>ES6 模块</h3><p>ES6 模块的设计思想，是尽量的<strong>静态化</strong>，使得<strong>编译时</strong>就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块都只能在运行时确定这些东西。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"jquery"</span>;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="built_in">module</span> <span class="string">"localModule"</span> &#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在ES6模块中，无论你是否加入<code>use strict</code>语句，默认情况下模块都是在严格模式下运行。</li>
<li>当运行的模块中包含一条<code>import</code>声明时，首先会加载被导入的模块；然后依赖图的深度优先遍历按顺序执行每一个模块的主体代码；为了避免形成回环，所有已执行的模块都会被忽略。</li>
</ul>
<h5 id="重命名import-和-export"><a href="#重命名import-和-export" class="headerlink" title="重命名import 和 export"></a>重命名import 和 export</h5><p>如果导出的名称与需要使用的其它名称产生冲突，可以使用重命名的方法，如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;flip <span class="keyword">as</span> flipOmelet&#125; <span class="keyword">from</span> <span class="string">"eggs.js"</span>;</div><div class="line"><span class="keyword">import</span> &#123;flip <span class="keyword">as</span> flipHouse&#125; <span class="keyword">from</span> <span class="string">"real-estate.js"</span>;</div></pre></td></tr></table></figure>
<p>在导出的时候也可以重命名</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">v1</span>(<span class="params"></span>) </span>&#123; ... &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">v2</span>(<span class="params"></span>) </span>&#123; ... &#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123;</div><div class="line">  v1 <span class="keyword">as</span> streamV1,</div><div class="line">  v2 <span class="keyword">as</span> streamV2,</div><div class="line">  v2 <span class="keyword">as</span> streamLatestVersion</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="default-exports"><a href="#default-exports" class="headerlink" title="default exports"></a>default exports</h5><p><code>import _ from &quot;lodash&quot;;</code></p>
<p>这种简略的表达方法等价于<code>import {default as _} from &quot;lodash&quot;;</code>。在ES6的模块中导入的CommonJS模块和AMD模块都有一个<code>默认的</code>导出，如果你用<code>require()</code>加载这些模块也会得到相同的结果——<code>exports</code>对象。</p>
<h5 id="模块对象"><a href="#模块对象" class="headerlink" title="模块对象"></a>模块对象</h5><p><code>import * as cows from &quot;cows&quot;;</code></p>
<p>当<code>import *</code>时，导入的是一个模块命名空间对象，模块将它的所有属性都导出了。所以如果“cows”模块导出一个名为<code>moon()</code>的函数，然后用上面这种方法“cows”将其全部导入后，就可以这样调用函数<code>cows.moo()</code></p>
<p><strong>优点</strong></p>
<ul>
<li>容易进行静态分析</li>
<li>面向未来的 ECMAScript 标准</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>原生浏览器端还没有实现该标准</li>
<li>全新的命令字，新版的 Node.js才支持</li>
</ul>
<p><strong>实现</strong></p>
<p><a href="https://babeljs.io/" target="_blank" rel="external">babel</a></p>
<h3 id="前端模块化工具"><a href="#前端模块化工具" class="headerlink" title="前端模块化工具"></a>前端模块化工具</h3><p><a href="https://webpack.github.io/docs/" target="_blank" rel="external">webpack</a></p>
<p>webpack 是当下最热门的前端资源模块化管理工具。通过 loader 的转换，任何形式的资源都可以视作模块。如 commonJS 模块、AMD 模块、ES6模块、CSS、图片等…</p>
<p>webpack 将根据模块的<strong>依赖关系</strong>进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了更好的管理网页的业务逻辑，产生了模块化编程的理念。&lt;/p&gt;
&lt;p&gt;常用的 JavaScript 的模块化规范有 CommonJS 、 AMD 、CMD&lt;/p&gt;
&lt;h3 id=&quot;CommonJS-规范&quot;&gt;&lt;a href=&quot;#CommonJS-规范&quot; class=&quot;head
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记</title>
    <link href="http://yoursite.com/2017/03/29/2017-04-02-%20Python%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/03/29/2017-04-02- Python笔记/</id>
    <published>2017-03-29T10:00:00.000Z</published>
    <updated>2017-04-27T14:05:26.533Z</updated>
    
    <content type="html"><![CDATA[<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'\\\t\\'</span>)</div><div class="line"><span class="comment">#\       \</span></div><div class="line">print(<span class="string">r'\\\t\\'</span>)</div><div class="line"><span class="comment">#\\\t\\</span></div></pre></td></tr></table></figure>
<p>用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'''line1</span></div><div class="line">line2</div><div class="line">line3''')</div></pre></td></tr></table></figure>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>对于单个字符的编码，Python提供了<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符</p>
<p><code>%</code>运算符用来格式化字符串，若字符串里面的<code>%</code>是一个普通字符的话，用<code>%%</code>来表示一个<code>%</code></p>
<h3 id="list的方法"><a href="#list的方法" class="headerlink" title="list的方法"></a>list的方法</h3><ul>
<li>append()</li>
<li>pop(index) //没有参数则删除最后一个元素</li>
<li>insert(index,element)</li>
</ul>
<h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p>list和tuple是Python内置的有序集合，一个可变，一个不可变。根据需要来选择使用它们。</p>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p><code>range()</code>: 可以生成一个整数序列，如<code>range(5)</code>生成0,1,2,3,4</p>
<h3 id="dict（字典）"><a href="#dict（字典）" class="headerlink" title="dict（字典）"></a>dict（字典）</h3><p>避免key不存在的错误</p>
<ul>
<li><p>用in判断key是否存在 <code>&#39;Thomas&#39; in d</code></p>
</li>
<li><p>二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：</p>
<p>  <code>d.get(&#39;thomas&#39;)或d.get(&#39;thomas&#39;,-1)</code></p>
</li>
<li><p>要删除一个key，用<code>pop(key)</code>方法，对应的value也会从dict中删除</p>
</li>
</ul>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>要创建一个set，需要提供一个list作为输入集合</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line"><span class="comment">#传入的参数[1, 2, 3]是一个list，而显示的&#123;1, 2, 3&#125;只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的</span></div></pre></td></tr></table></figure>
<p>重复的元素在set中会被自动过滤</p>
<ul>
<li><code>add(key)</code>可以添加元素到set中</li>
<li><code>remove(key)</code> 删除元素</li>
</ul>
<p>两个set可以做数学意义上的交集、并集等操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = set([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</div><div class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h5 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h5><p><a href="https://docs.python.org/3/library/functions.html#built-in-functions" target="_blank" rel="external">https://docs.python.org/3/library/functions.html#built-in-functions</a></p>
<h5 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h5><p>定义函数时，需要确定函数名和参数个数；</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>):</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">    	<span class="keyword">return</span> -x</div></pre></td></tr></table></figure>
<p><code>pass</code>语句什么都不做，可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个<code>pass</code></p>
<h5 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h5><p>如果有必要，可以先对参数的数据类型做检查；</p>
<p>数据类型检查可以用内置函数<code>isinstance()</code>实现：</p>
<p><code>raise</code>语句用来抛出一个错误</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, (int, float)):</div><div class="line">	<span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</div></pre></td></tr></table></figure>
<p>函数可以返回多个值，Python的函数返回多值其实就是返回一个tuple</p>
<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul>
<li><p>默认参数必须指向不变对象</p>
</li>
<li><p>可变参数`def calc(*numbers)</p>
<p>可变参数既可以直接传入：<code>func(1, 2, 3)</code>，又可以先组装list或tuple，再通过<code>*args</code>传入：<code>func(*(1, 2, 3))</code>；</p>
</li>
<li><p>关键字参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></div><div class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Adam'</span>, <span class="number">45</span>, gender=<span class="string">'M'</span>, job=<span class="string">'Engineer'</span>)</div><div class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">'gender'</span>: <span class="string">'M'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div></pre></td></tr></table></figure>
<p>可以先组装出一个dict，然后把dict当做关键字参数传进去</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, **extra)</div><div class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p><code>L[0:3]</code>表示从索引<code>0</code>开始取，直到索引<code>3</code>为止，但不包括索引<code>3</code>。即索引0,1,2，正好是3个元素。</p>
<p>倒数第一个元素的索引是-1</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#创建一个0-99的数列</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = list(range(<span class="number">100</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ..., <span class="number">99</span>]</div><div class="line"><span class="comment">#前10个数，每两个取一个：</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[:<span class="number">10</span>:<span class="number">2</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</div></pre></td></tr></table></figure>
<p>tuple也可以用切片操作，只是操作的结果仍是tuple</p>
<p>字符串也可以用切片操作，只是操作结果仍是字符串</p>
<h5 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h5><p><code>for ... in</code></p>
<ul>
<li><p>默认情况下，dict迭代的是key。如果要迭代value，可以用<code>for value in d.values()</code>，如果要同时迭代key和value，可以用<code>for k, v in d.items()</code></p>
</li>
<li><p>如何判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型判断</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
<li><p>Python内置的<code>enumerate</code>函数可以把一个list变成索引-元素对，这样就可以在<code>for</code>循环中同时迭代索引和元素本身</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>]):</div><div class="line"><span class="meta">... </span>    print(i, value)</div><div class="line">...</div><div class="line"><span class="number">0</span> A</div><div class="line"><span class="number">1</span> B</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h5><ul>
<li><p>写列表生成式时，把要生成的元素<code>x * x</code>放到前面，后面跟<code>for</code>循环，就可以把list创建出来，即要生成<code>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</code>，用 <code>[x * x for x in range(1, 11)]</code></p>
</li>
<li><p>for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：</p>
<p><code>&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0]  得到：[4, 16, 36, 64, 100]</code></p>
</li>
<li><p>使用两层循环，可以生成全排列：</p>
<p><code>&gt;&gt;&gt; [m + n for m in &#39;ABC&#39; for n in &#39;XYZ&#39;]  得到 ：[&#39;AX&#39;, &#39;AY&#39;, &#39;AZ&#39;, &#39;BX&#39;, &#39;BY&#39;, &#39;BZ&#39;, &#39;CX&#39;, &#39;CY&#39;, &#39;CZ&#39;]</code></p>
</li>
</ul>
<h5 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h5><p>要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个generator</p>
<p><code>g = (x * x for x in range(10))</code></p>
<ul>
<li>可以通过<code>next()</code>函数获得generator的下一个返回值<code>next(g)</code></li>
<li>generator保存的是算法，每次调用<code>next(g)</code>，就计算出<code>g</code>的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出<code>StopIteration</code>的错误。</li>
<li>generator也是可迭代对象,所以可以使用for循环</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#杨辉三角</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangles</span><span class="params">(n)</span>:</span></div><div class="line">	L = [<span class="number">1</span>]</div><div class="line">	<span class="keyword">while</span> n&gt;<span class="number">0</span>:</div><div class="line">		<span class="keyword">yield</span> L</div><div class="line">		L.append(<span class="number">0</span>)</div><div class="line">		L = [L[i<span class="number">-1</span>] + L[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(L))]</div><div class="line">		n = n<span class="number">-1</span></div><div class="line">f = triangles(<span class="number">6</span>)</div><div class="line"><span class="keyword">for</span> v <span class="keyword">in</span> f:</div><div class="line">	print(v)</div></pre></td></tr></table></figure>
<h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><p>可直接作用于for循环的数据类型有：</p>
<ul>
<li>集合数据类型：如list、tuple、dict、set、str等</li>
<li>一类是generator，包括生成器和带yield的generator function</li>
</ul>
<p>凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型；</p>
<p>凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列；</p>
<h3 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h3><p><code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * x</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(r)</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;输出&quot;&gt;&lt;a href=&quot;#输出&quot; class=&quot;headerlink&quot; title=&quot;输出&quot;&gt;&lt;/a&gt;输出&lt;/h3&gt;&lt;p&gt;用&lt;code&gt;r&amp;#39;&amp;#39;&lt;/code&gt;表示&lt;code&gt;&amp;#39;&amp;#39;&lt;/code&gt;内部的字符串默认不转义&lt;/p&gt;
&lt;fig
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端状态管理之Flux、Redux、Vuex</title>
    <link href="http://yoursite.com/2017/03/23/2017-03-23-%20%E5%89%8D%E7%AB%AF%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E4%B9%8BFlux%E3%80%81Redux%E3%80%81Vuex/"/>
    <id>http://yoursite.com/2017/03/23/2017-03-23- 前端状态管理之Flux、Redux、Vuex/</id>
    <published>2017-03-23T03:00:00.000Z</published>
    <updated>2017-04-08T12:27:53.683Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Flux是一种前端状态管理架构思想。基于 Flux 的设计思想，出现了一批前端状态管理框架。比较主流的就是 Vuex 和 Redux 了。</p>
</blockquote>
<p>两篇特别好的文章</p>
<p><a href="https://zhuanlan.zhihu.com/p/25800767" target="_blank" rel="external">浅谈前端状态管理（上）</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/25908872" target="_blank" rel="external">浅谈前端状态管理（下）</a></p>
<h3 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h3><p> Flux 的思维方式是单向的，将修改数据层的 controller 代码收归一处，统一管理，组件需要修改数据层的话需要去触发特定的预先定义好的 dispatcher，然后 dispatcher 将 action 应用到 model 上，实现数据层的修改。然后数据层的修改会应用到视图上，形成一个单向的数据流。</p>
<p><img src="1.jpg" alt=""></p>
<p>Flux 的核心是 <strong>Dispatcher</strong>，通过 Dispatcher，用户可以注册需要相应的 action 类型，对不同的 action 注册对应的回调，以及触发 action 并传递 payload data。</p>
<p>简单来说，Flux的数据流生命周期就是： View 发起 Action -&gt; Action 传递到 Dispatcher -&gt; Dispatcher 将通知 Store -&gt; Store 的状态改变通知 View 进行改变</p>
<h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>￼<img src="2.jpg" alt=""></p>
<p>​    Redux 和 Flux 的第一个区别是，在 Redux 中，去掉了 Dispatcher，转而使用一个纯函数来代替，这个纯函数接收原 state tree 和 action 作为参数，并生成一个新的 state tree 代替原来的。而这个所谓的纯函数，就是 Redux 中的重要概念 —— <strong>Reducer</strong>。</p>
<p>​    Redux 和 Flux 的第二个区别则是 Redux <strong>不会修改任何一个 state</strong>，而是用新生成的 state 去代替旧的。这实际上是应用了不可变数据（Immutable Data），在 reducer 中直接修改原 state 是被禁止的</p>
<p>Redux 的工作方式遵循了严格的单向数据流原则，整个生命周期为：</p>
<ul>
<li>View 调用 store.dispatch，并传入 action 对象。action 对象是一个描述变化的普通对象</li>
<li>接下来，store 会调用注册 store 时传入的 reducer 函数，并将当前的 state 和 action 作为参数传入，在 reducer 中，通过计算得到新的 state 并返回。</li>
<li>store 将 reducer 生成的新 state 树保存下来，然后就可以用新的 state 去生成新的视图</li>
</ul>
<h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><p>￼<img src="3.jpg" alt=""></p>
<p>​     和 Redux 中使用不可变数据来表示 state 不同，Vuex 中没有 reducer 来生成全新的 state 来替换旧的 state，Vuex 中的 state 是<strong>可以被修改的</strong>。即，以 <code>mutations</code> 变化函数取代 <code>Reducer</code>，无需 switch ，只需在对应的 mutation 函数里改变 state 值即可。一个 mutation 是由一个 type 和与其对应的 handler 构成的，type 是一个字符串类型用以作为 key 去识别具体的某个 mutation，handler 则是对 state 实际进行变更的函数。</p>
<p>​    这么做的原因和 Vue 的运行机制有关系，Vue 基于 ES5 中的 <code>getter/setter</code> 来实现视图和数据的双向绑定，因此 Vuex 中 state 的变更可以通过 setter 通知到视图中对应的指令来实现视图更新。</p>
<p>​    在 Vuex 中可以记录每次 state 改变的具体内容，state 的变更可被记录与追踪。Vuex 中的 action 也是 store 的组成部分，它可以被看成是连接视图与 state 的桥梁，它会被视图调用，并由它来调用 mutation handler，向 mutation 传入 payload。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Flux是一种前端状态管理架构思想。基于 Flux 的设计思想，出现了一批前端状态管理框架。比较主流的就是 Vuex 和 Redux 了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;两篇特别好的文章&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>解决Canvas图片跨域问题</title>
    <link href="http://yoursite.com/2017/03/14/2017-03-14-%20%E8%A7%A3%E5%86%B3Canvas%E5%9B%BE%E7%89%87%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/03/14/2017-03-14- 解决Canvas图片跨域问题/</id>
    <published>2017-03-14T12:00:00.000Z</published>
    <updated>2017-03-15T13:27:22.062Z</updated>
    
    <content type="html"><![CDATA[<p>Uncaught DOMException: Failed to execute ‘getImageData’ on ‘CanvasRenderingContext2D’: The canvas has been tainted by cross-origin data.`</p>
<p>在写canvas的时候要获取图像数据，遇到了上面这个错误。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image()</div><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>)</div><div class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</div><div class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">  img.style.display = <span class="string">'none'</span></div><div class="line">&#125;;</div><div class="line">img.src = <span class="string">'1.png'</span></div><div class="line"><span class="comment">//....省略不重要的代码</span></div><div class="line"><span class="keyword">var</span> pix = ctx.getImageData(x, y, <span class="number">1</span>, <span class="number">1</span>)<span class="comment">//错误的地方</span></div></pre></td></tr></table></figure>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>一般情况下，我们可以不通过CORS就在画布中使用跨域图片，用<code>new Image()</code>加载，然后将这个图片画在canvas上。但是这么做会污染画布，也就是让canvas变成了脏状态，一旦画布被污染，我们就不能读取其数据。譬如toDataUrl、getImageData()等。</p>
<p>​    为了解决这个问题，image新增了一个属性crossOrigin，使得img也走类似XHR的跨域权限机制。设置了crossOrigin的img，即便是跨域图片被画在canvas上，也不会使canvas变为脏状态。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ul>
<li><p>给image设置crossOrigin属性   <code>img.crossOrigin=&quot;anonymous&quot;</code></p>
<p>提供资源的服务器也得支持跨域请求  header要设置<code>Access-Control-Allow-Origin:*</code></p>
<p>crossOrigin属性一定要在src之前设置</p>
</li>
<li><p>如果在本地运行报错，可能是因为使用了<code>file://</code></p>
<p>也就是说这个页面需要运行在服务器上，所以我们可以运行一个localhost </p>
<p>Set up localhost的几个方法..</p>
<ul>
<li>丢在 WampServer 里</li>
<li><code>python -m http.server 8080</code>  （Python3）</li>
</ul>
<p>​</p>
</li>
</ul>
<p>stackoverfow 的相关提问 <a href="http://stackoverflow.com/questions/9972049/cross-origin-data-in-html5-canvas" target="_blank" rel="external">canvas CORS</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Uncaught DOMException: Failed to execute ‘getImageData’ on ‘CanvasRenderingContext2D’: The canvas has been tainted by cross-origin data.`
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Canvas 学习笔记</title>
    <link href="http://yoursite.com/2017/03/02/2017-03-02-%20Canvas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/03/02/2017-03-02- Canvas学习笔记/</id>
    <published>2017-03-02T13:04:13.000Z</published>
    <updated>2017-03-15T13:32:23.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="虚线"><a href="#虚线" class="headerlink" title="虚线"></a>虚线</h2><p>使用<code>setLineDash</code>和<code>lineDashOffset</code>属性来设置虚线样式</p>
<ul>
<li><p>setLineDash : 接受一个数组来制定虚线里的线段和间隙的长度</p>
<p>如<code>ctx.serLineDash([4,2])</code></p>
</li>
<li><p>lineDashOffset : 设置虚线起始偏移量</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一个行军蚁的demo</span></div><div class="line"><span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</div><div class="line"><span class="keyword">var</span> offset = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>, canvas.width, canvas.height);</div><div class="line">  ctx.setLineDash([<span class="number">4</span>, <span class="number">2</span>]);</div><div class="line">  ctx.lineDashOffset = -offset;</div><div class="line">  ctx.strokeRect(<span class="number">10</span>,<span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">march</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  offset++;</div><div class="line">  <span class="keyword">if</span> (offset &gt; <span class="number">16</span>) &#123;</div><div class="line">    offset = <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  draw();</div><div class="line">  setTimeout(march, <span class="number">20</span>);</div><div class="line">&#125;</div><div class="line">march();</div></pre></td></tr></table></figure>
<p><img src="ants.gif" alt="ants"></p>
<h2 id="渐变-Gradients"><a href="#渐变-Gradients" class="headerlink" title="渐变 Gradients"></a>渐变 Gradients</h2><ul>
<li><code>createLinearGradient(x1, y1, x2, y2)</code>  接受 4 个参数，表示渐变的起点 (x1,y1) 与终点 (x2,y2)。</li>
<li><code>createRadialGradient(x1, y1, r1, x2, y2, r2)</code>接受 6 个参数，前三个定义一个以 (x1,y1) 为原点，半径为 r1 的圆，后三个参数则定义另一个以 (x2,y2) 为原点，半径为 r2 的圆。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//让起点稍微偏离终点，达到球状3D渐变效果</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</div><div class="line">  <span class="keyword">var</span> radial = ctx.createRadialGradient(<span class="number">45</span>,<span class="number">45</span>,<span class="number">10</span>,<span class="number">52</span>,<span class="number">50</span>,<span class="number">30</span>);</div><div class="line">  radial.addColorStop(<span class="number">0</span>, <span class="string">'#A7D30C'</span>);</div><div class="line">  radial.addColorStop(<span class="number">0.9</span>, <span class="string">'#019F62'</span>);</div><div class="line">  radial.addColorStop(<span class="number">1</span>, <span class="string">'rgba(1,159,98,0)'</span>);</div><div class="line">  <span class="comment">//#019F62和rgba(1,159,98,1)的色值是相等的，最后一个色是透明的。两个值相等可以使过渡柔和。</span></div><div class="line">  ctx.fillStyle = radial;</div><div class="line">  ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">150</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="radialGradient.png" alt="createRadialGradient"></p>
<h2 id="简单动画"><a href="#简单动画" class="headerlink" title="简单动画"></a>简单动画</h2><h3 id="window-requestAnimationFrame"><a href="#window-requestAnimationFrame" class="headerlink" title="window.requestAnimationFrame()"></a>window.requestAnimationFrame()</h3><p><code>window.requestAnimationFrame()</code> 方法告诉浏览器您希望执行动画，并请求浏览器调用指定的函数在下一次重绘之前更新动画。该方法将在重绘之前调用的回调作为参数。</p>
<p>如果想做逐帧动画的时候应该用这个方法，你的动画函数执行会先于浏览器重绘动作。</p>
<p>下面举一个小球的例子</p>
<p><a href="http://codepen.io/lizimeow/pen/GWRaOx" target="_blank" rel="external">codepen地址</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//运动的小球</span></div><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>)</div><div class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</div><div class="line"><span class="keyword">var</span> raf</div><div class="line"><span class="keyword">var</span> ball = &#123;</div><div class="line">  <span class="attr">x</span>: <span class="number">100</span>,</div><div class="line">  <span class="attr">y</span>: <span class="number">100</span>,</div><div class="line">  <span class="attr">vx</span>: <span class="number">5</span>,<span class="comment">//速度矢量</span></div><div class="line">  vy: <span class="number">2</span>,</div><div class="line">  <span class="attr">radius</span>: <span class="number">25</span>,</div><div class="line">  <span class="attr">color</span>: <span class="string">'blue'</span>,</div><div class="line">  <span class="attr">draw</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    ctx.beginPath()</div><div class="line">    ctx.arc(<span class="keyword">this</span>.x,<span class="keyword">this</span>.y,<span class="keyword">this</span>.radius,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>)</div><div class="line">    ctx.closePath()</div><div class="line">    ctx.fillStyle = <span class="keyword">this</span>.color</div><div class="line">    ctx.fill()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//用clear 清理掉之前帧里旧的圆形。</span></div><div class="line">  <span class="comment">//ctx.clearRect(0,0,canvas.width,canvas.height) </span></div><div class="line">  </div><div class="line">  <span class="comment">//用一个半透明的fillRect函数取代clearRect函数，产生长尾效果</span></div><div class="line">  ctx.fillStyle = <span class="string">'rgba(255,255,255,0.3)'</span>;</div><div class="line">  ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  clear()</div><div class="line">  ball.draw()</div><div class="line">  ball.x+=ball.vx <span class="comment">//球依靠添加速率矢量进行移动</span></div><div class="line">  ball.y+=ball.vy</div><div class="line">  raf = <span class="built_in">window</span>.requestAnimationFrame(draw)</div><div class="line">&#125;</div><div class="line">canvas.addEventListener(<span class="string">"mouseover"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">  raf = <span class="built_in">window</span>.requestAnimationFrame(draw)</div><div class="line">&#125;)</div><div class="line">canvas.addEventListener(<span class="string">"mouseout"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">  <span class="built_in">window</span>.cancelAnimationFrame(raf)</div><div class="line">&#125;)</div><div class="line">ball.draw()</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在draw()函数里加上边界检测</span></div><div class="line"><span class="keyword">if</span> (ball.y + ball.vy &gt; canvas.height || ball.y + ball.vy &lt; <span class="number">0</span>) &#123;</div><div class="line">  ball.vy = -ball.vy;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (ball.x + ball.vx &gt; canvas.width || ball.x + ball.vx &lt; <span class="number">0</span>) &#123;</div><div class="line">  ball.vx = -ball.vx;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ImageData"><a href="#ImageData" class="headerlink" title="ImageData"></a>ImageData</h2><h3 id="ctx-createImageData-width-height"><a href="#ctx-createImageData-width-height" class="headerlink" title="ctx.createImageData(width,height)"></a>ctx.createImageData(width,height)</h3><p>创建一个 新的、空白的、指定大小的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ImageData" target="_blank" rel="external"><code>ImageData</code></a> 对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</div><div class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">ctx.rect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">ctx.fill();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(ctx.createImageData(<span class="number">100</span>, <span class="number">100</span>)); </div><div class="line"><span class="comment">// ImageData &#123; width: 100, height: 100, data: Uint8ClampedArray[40000] &#125;</span></div></pre></td></tr></table></figure>
<h3 id="ctx-getImageData-left-top-width-height"><a href="#ctx-getImageData-left-top-width-height" class="headerlink" title="ctx.getImageData(left, top, width, height)"></a>ctx.getImageData(left, top, width, height)</h3><p>得到上下文的像素数据</p>
<p>这个方法会返回一个ImageData对像，它代表了画布区域的像素数据，此画布的四个角落分别表示为(left, top), (left + width, top), (left, top + height), 以及(left + width, top + height)四个点。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> imgData = ctx.getImageData(x, y, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line"><span class="keyword">var</span> data = imgData.data;<span class="comment">//可以通过imgData.data 数组数据去获取每个像素点背景颜色 </span></div><div class="line"><span class="keyword">var</span> rgba = <span class="string">'rgba('</span> + data[<span class="number">0</span>] + <span class="string">','</span> + data[<span class="number">1</span>] + <span class="string">','</span> + data[<span class="number">2</span>] + <span class="string">','</span> + data[<span class="number">3</span>] + <span class="string">')'</span></div></pre></td></tr></table></figure>
<h3 id="ctx-putImageData-myImageData-dx-dy"><a href="#ctx-putImageData-myImageData-dx-dy" class="headerlink" title="ctx.putImageData(myImageData, dx, dy)"></a>ctx.putImageData(myImageData, dx, dy)</h3><p>对场景进行像素数据的写入</p>
<p>dx和dy参数表示你希望在场景内左上角绘制的像素数据所得到的设备坐标。</p>
<h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p>drawImage</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> ctx.drawImage(image, dx, dy);</div><div class="line"><span class="keyword">void</span> ctx.drawImage(image, dx, dy, dWidth, dHeight);</div><div class="line"><span class="keyword">void</span> ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);</div><div class="line"><span class="comment">//iamge:绘制到上下文的元素。允许任何的 canvas 图像源</span></div><div class="line"><span class="comment">//dx,dy:目标画布的左上角在目标 canvas 上 X 轴和 Y 轴的位置</span></div><div class="line"><span class="comment">//dWidth,dHeight:在目标画布上绘制图像的宽度或高度。允许对绘制的图像进行缩放。 如不说明， 在绘制时图片宽度不会缩放。</span></div><div class="line"><span class="comment">//sx,sy:需要绘制到目标上下文中的，源图像的矩形选择框的左上角 X , Y 坐标</span></div><div class="line"><span class="comment">//sWidth,sHeight:需要绘制到目标上下文中的，源图像的矩形选择框的宽度。如不说明，整个矩形从坐标的sx和sy开始，到图像的右下角结束。</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//缩放</span></div><div class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">img.src = <span class="string">'https://mdn.mozillademos.org/files/5397/rhino.jpg'</span>;</div><div class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  draw(<span class="keyword">this</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">img</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</div><div class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line">  ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">  img.style.display = <span class="string">'none'</span>;</div><div class="line">  <span class="keyword">var</span> zoom = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> x = event.layerX;</div><div class="line">    <span class="keyword">var</span> y = event.layerY;</div><div class="line">    zoomctx.drawImage(canvas,</div><div class="line">                      <span class="built_in">Math</span>.abs(x - <span class="number">5</span>),<span class="built_in">Math</span>.abs(y - <span class="number">5</span>),</div><div class="line">                      <span class="number">10</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">                      <span class="number">200</span>, <span class="number">200</span>);</div><div class="line">    <span class="comment">//得到鼠标的位置并裁剪出距各边5像素的图片。将裁出的图复制到另一个画布再把图片调整到我们想要的大小。在缩放画布里，我们将10×10像素的对原画布的裁剪调整为 200×200 。</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  canvas.addEventListener(<span class="string">'mousemove'</span>, zoom);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://codepen.io/lizimeow/pen/evGNeK" target="_blank" rel="external">在codepen查看缩放效果</a></p>
<h3 id="反锯齿"><a href="#反锯齿" class="headerlink" title="反锯齿"></a>反锯齿</h3><p>因为反锯齿默认是启用的，我们可能想要关闭它以看到清楚的像素</p>
<p>(不同浏览器需要不同前缀)</p>
<p>ctx.imageSmoothingEnabled \ mozImageSmoothingEnabled \ webkitImageSmoothingEnabled \ msImageSmoothingEnabled </p>
<h2 id="canvas的优化"><a href="#canvas的优化" class="headerlink" title="canvas的优化"></a>canvas的优化</h2><ul>
<li>在离屏canvas上预渲染相似的图形或重复的对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">myEntity.offscreenCanvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</div><div class="line">myEntity.offscreenCanvas.width = myEntity.width;</div><div class="line">myEntity.offscreenCanvas.height = myEntity.height;</div><div class="line">myEntity.offscreenContext = myEntity.offscreenCanvas.getContext(<span class="string">"2d"</span>);</div><div class="line"></div><div class="line">myEntity.render(myEntity.offscreenContext);</div></pre></td></tr></table></figure>
<ul>
<li><p>避免浮点数的坐标点，用整数取而代之</p>
<p>浏览器为了达到抗锯齿的效果会做额外的运算，所以在调用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage" target="_blank" rel="external"><code>drawImage()</code></a>函数时，应该用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/floor" target="_blank" rel="external"><code>Math.floor()</code></a>函数对所有的坐标点取整。</p>
</li>
<li><p>在离屏canvas中缓存图片的不同尺寸，而不要用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage" target="_blank" rel="external"><code>drawImage()</code></a>去缩放它们</p>
</li>
<li><p>使用多层画布去画一个复杂的场景</p>
</li>
<li><p>用CSS设置大的背景图</p>
<p>如果你有一张静态的背景图，那就用一个静态的div元素，结合background，再将它置于画布元素之后。这么做可以避免在每一帧在画布上绘制大图。</p>
</li>
<li><p>用CSS transforms特性缩放画布。</p>
<p>CSS的transforms特性由于调用GPU，因此更快捷。最好的情况是，不要将小画布放大，而是去将大画布缩小</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scaleX = canvas.width / <span class="built_in">window</span>.innerWidth;</div><div class="line"><span class="keyword">var</span> scaleY = canvas.height / <span class="built_in">window</span>.innerHeight;</div><div class="line"></div><div class="line"><span class="keyword">var</span> scaleToFit = <span class="built_in">Math</span>.min(scaleX, scaleY);</div><div class="line"><span class="keyword">var</span> scaleToCover = <span class="built_in">Math</span>.max(scaleX, scaleY);</div><div class="line"></div><div class="line">stage.style.transformOrigin = <span class="string">"0 0"</span>; <span class="comment">//scale from top left</span></div><div class="line">stage.style.transform = <span class="string">"scale("</span> + scaleToFit + <span class="string">")"</span>;</div></pre></td></tr></table></figure>
<p>更多关于Canvas性能优化的文章</p>
<ul>
<li><a href="http://www.html5rocks.com/en/tutorials/canvas/performance/#toc-ref" target="_blank" rel="external">Improving HTML5 Canvas Performance – HTML5 Rocks</a></li>
<li><a href="https://hacks.mozilla.org/2013/05/optimizing-your-javascript-game-for-firefox-os/" target="_blank" rel="external">Optimizing your JavaScript game for Firefox OS – Mozilla Hacks</a></li>
</ul>
<p>本文是学习 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API" target="_blank" rel="external">MDN_Canvas_API</a> 的笔记</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;虚线&quot;&gt;&lt;a href=&quot;#虚线&quot; class=&quot;headerlink&quot; title=&quot;虚线&quot;&gt;&lt;/a&gt;虚线&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;setLineDash&lt;/code&gt;和&lt;code&gt;lineDashOffset&lt;/code&gt;属性来设置虚线样式&lt;/p&gt;
&lt;u
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【翻译】优化Web中的GIFs</title>
    <link href="http://yoursite.com/2017/02/20/2017-02-20-%E3%80%90%E7%BF%BB%E8%AF%91%E3%80%91%E4%BC%98%E5%8C%96Web%E9%87%8C%E7%9A%84GIF/"/>
    <id>http://yoursite.com/2017/02/20/2017-02-20-【翻译】优化Web里的GIF/</id>
    <published>2017-02-20T06:00:00.000Z</published>
    <updated>2017-02-23T07:12:34.546Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://bitsofco.de/optimising-gifs/" target="_blank" rel="external">https://bitsofco.de/optimising-gifs/</a></p>
<p>跟很多人一样，我也很喜欢GIF。我喜欢在我的文章里使用它们来说明功能。就像在我 <a href="https://bitsofco.de/challenge-itunes-library/" target="_blank" rel="external">“Recreating the iTunes Library”</a> 这篇文章里的这个GIF一样。</p>
<p><img src="https://bitsofco.de/content/images/2017/01/lossy-compressed.gif" alt="Example GIF Original File"></p>
<p>然而，在文章里使用GIF实在太<em>重</em>了，上面的这个GIF就占了11.4MB（注：上面这张图不是原图，我无法将原图加载到页面上。）最近，我发现我的一些使用了很大的GIF的文章加载速度往往很慢。原因是使用了无损压缩算法，让一个GIF的每帧都作为一张GIF图片存储。这意味着，通过无损压缩，，图片的质量没有任何损耗，这也是为什么GIF这么大的原因了。</p>
<p>为了解决GIF在网页上的性能问题，我们可以采取下列的一些措施。</p>
<h3 id="使用-HTML5-Video"><a href="#使用-HTML5-Video" class="headerlink" title="使用 HTML5  Video"></a>使用 HTML5  Video</h3><p>令人惊讶的是，使用了无损压缩算法的GIF相当于未经优化处理，以至于例如MP4或者WebM的视频格式提供了比GIF更小的文件尺寸。因此，一个解决GIF性能问题的方案就是不去使用GIF，并且用自动循环播放的HTML5 Video来代替它。</p>
<p>通过使用<code>&lt;video&gt;</code>元素中的确定的属性，我们可以模仿GIF的行为，而且文件占用的存储空间更小。我们需要这些属性：</p>
<ul>
<li><code>autoplay</code> ：视频在就绪后马上播放。</li>
<li><code>loop</code>：无限循环播放该视频</li>
<li><code>muted</code>：当设置该属性后，它规定视频的音频输出应该被静音</li>
<li><code>playsinline</code>：在iOS Safari浏览器中确保视频不会被调到全屏模式。</li>
<li><code>poster</code>：规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像。</li>
</ul>
<p>我们可以使用下面的这个video元素来代替上文介绍中的GIF：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">muted</span> <span class="attr">playsinline</span> <span class="attr">poster</span>=<span class="string">"original.jpg"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"video/webm"</span> <span class="attr">src</span>=<span class="string">"original.webm"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"original.gif"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<p>它给了我们一个非常小的视频，只有1MB！</p>
<video autoplay loop muted playsinline="" poster="http://res.cloudinary.com/ireaderinokun/image/upload/v1485711823/lossy-compressed_s9cypz.jpg"><br><br><source type="video/webm" src="http://res.cloudinary.com/ireaderinokun/image/upload/v1485711823/lossy-compressed_s9cypz.webm"><br><img src="https://bitsofco.de/content/images/2017/01/lossy-compressed.gif"><br><br></video>

<p>我们可以使用<a href="https://cloudconvert.com/gif-to-webm" target="_blank" rel="external">CloudConvert</a>来将GIF转换成 WebM 。或者，如果你使用<a href="https://cloudinary.com/" target="_blank" rel="external">Cloudinary</a>，你只需要将<code>.gif</code>的文件后缀改成<code>.webm</code>就可以得到这个视频格式了。</p>
<h3 id="有损优化"><a href="#有损优化" class="headerlink" title="有损优化"></a>有损优化</h3><p>在一些情况下，因为 HTML5 Video 不能作用于任何地方，我们不得不在那儿使用真正的GIF。例如，当一个博客作为HTML 邮件传递时，就必须使用真正的GIF了。所以，我们不得不对GIF自身做一些优化来提高性能。</p>
<p>正如我提到的那样，GIF压缩算法是无损的。然而，也有有损压缩的选项。虽然听起来我们将得到一个低质量的GIF，但是有损压缩做得好的话也不会明显的降低图像的质量。</p>
<p>有许多我们可以使用的有损压缩GIF的工具，譬如 <a href="https://github.com/kohler/gifsicle" target="_blank" rel="external">gifsicle</a> 和 <a href="https://github.com/pornel/giflossy" target="_blank" rel="external">giflossy</a> 就是很流行的用来优化 GIF 的工具 . Gifsicle 是一个用命令行界面来操纵GIF文件的工具， giflossy 是 gifsicle 的一个分支，提供有损压缩的选项（<code>--lossy</code>）</p>
<p><code>gifsicle -O3 --lossy=80 -o compressed.gif original.gif</code></p>
<p><code>-03</code>选项的作用是告诉 gifsicle 尝试去找到最合适的优化方法。<code>--lossy=80</code>选项指定文件要有损压缩多少。你可以根据需要调整这个数字。<code>-o compressed.gif</code>选项指定压缩后输出的 GIF 的命名。最后，我们要写上源 GIF 的地址。</p>
<p>使用上面的这个命令压缩上文提到的 GIF 的例子，我们将11.4MB 的GIF 压缩到 6MB ，减少了47%的文件大小！</p>
<p> <img src="https://bitsofco.de/content/images/2017/01/lossy-compressed.gif" alt="Compressed GIF"></p>
<p>结合上述的两种方法，我们可以在某种程度上使用GIF，并且不会急剧的降低性能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文地址：&lt;a href=&quot;https://bitsofco.de/optimising-gifs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://bitsofco.de/optimising-gifs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跟很多人一样
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript&#39;s bitwise operators</title>
    <link href="http://yoursite.com/2016/12/30/2016-12-30-JavaScript%E2%80%98s%20bitwise%20operators/"/>
    <id>http://yoursite.com/2016/12/30/2016-12-30-JavaScript‘s bitwise operators/</id>
    <published>2016-12-30T06:00:00.000Z</published>
    <updated>2016-12-30T13:04:09.251Z</updated>
    
    <content type="html"><![CDATA[<p>在做codewars的Morse encoding 的题目的时候，发现js的位运算很奇怪_(:зゝ∠)…</p>
<p>然后试了一下</p>
<p><code>console.log((5).toString(2));</code></p>
<p>结果是 <code>101</code></p>
<p><code>console.log(~5)</code></p>
<p>想象中应该是2 或者010</p>
<p>然而结果是<code>-6</code>… </p>
<p><strong>Reason：</strong></p>
<p>The binary representation of numbers in JS is handled in the “Two’s Complement” system. which is just a fancy way of saying that for any given set of bits,the first bit represents the sign (0 for positive,1 for negative) of the number and the rest of the bits represent the “absolute value” of the number according to the follow simple formula:</p>
<ul>
<li>For positive numbers and 0 ,the value tells how “far” from 0 the number is… i.e. 10 in binary(2 in decimal) means “2 above 0” ,so for a 3-bit number in Two’s Complement ,the number 2(decimal) would be represented as “010”</li>
<li>For negative numbers,how far above the smallest possible value that can be represented with the number of bits available ,e.g. with three bits ,the smallest possible number we can represent is -4 ,so “101”(binary) is like saying “01 more than -4” or -3.</li>
</ul>
<p>so in the example above ,when we “flipped” the bits of the number 5,there was the extra “sign bit” on the front that got flipped as well.. so what we thought was “101” was actually “0101” and when we flipped the bits ,we got “1010” i.e. “-6”</p>
<p>即所有的按位操作符的操作数都会被转成补码（two’s complement）形式的有符号32位整数。</p>
<p>所以要考虑在进行位运算的时候一定要考虑符号位..</p>
<p><code>&lt;&lt;</code> 有符号左移</p>
<p><code>&gt;&gt;</code> 有符号右移</p>
<p><code>&lt;&lt;&lt;</code> 无符号左移</p>
<p><code>&gt;&gt;&gt;</code>无符号右移</p>
<h4 id="巧用"><a href="#巧用" class="headerlink" title="巧用"></a>巧用</h4><ul>
<li><p>判断奇偶性</p>
<p><code>n &amp; 1 === 0 //true 为 奇数</code></p>
</li>
<li><p>向下取整</p>
<p><code>(3.14 | 0) === 3 //true</code></p>
<p><code>~~3.14 //3</code></p>
</li>
<li><p>向上取整</p>
<p><code>-~3.14 //4</code></p>
</li>
<li><p>交替变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = 1, b = 2;</div><div class="line">a ^= b; // a = a ^ b = 1 ^ 2 = 3</div><div class="line">b ^= a; // b = b ^ (a ^ b) = 2 ^ (1 ^ 2) = 1</div><div class="line">a ^= b; // a = a ^ b = 3 ^ 1 = 2</div></pre></td></tr></table></figure>
</li>
<li><p>求 2 的 N 次方</p>
<p><code>1 &lt;&lt; n</code></p>
</li>
<li><p>判断数字正负</p>
<p><code>(n === (n &gt;&gt;&gt; 0)) ? true : false; //负数返回false</code></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做codewars的Morse encoding 的题目的时候，发现js的位运算很奇怪_(:зゝ∠)…&lt;/p&gt;
&lt;p&gt;然后试了一下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console.log((5).toString(2));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;结果是 &lt;code&gt;101
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars - 3kyu - Morse Encoding</title>
    <link href="http://yoursite.com/2016/12/29/2016-12-29-Codewars-3kyu-MorseEncoding/"/>
    <id>http://yoursite.com/2016/12/29/2016-12-29-Codewars-3kyu-MorseEncoding/</id>
    <published>2016-12-29T02:26:49.000Z</published>
    <updated>2016-12-30T03:49:29.461Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.codewars.com/kata/morse-encoding/train/javascript" target="_blank" rel="external">题目</a></p>
<p>这个题目的要求就是让我们写两个方法</p>
<p>The first method <code>Morse.encode</code> will take a String representing the message and will return an array of <strong>signed 32-bit integers</strong> in <strong>big-endian order</strong> and in <strong>two’s complement format</strong>. </p>
<p>The second method <code>Morse.decode</code> will take an array of numbers and return the String representation of the message. </p>
<p>我的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Morse = &#123;&#125;;</div><div class="line">Morse.alpha = &#123;</div><div class="line">  <span class="string">'A'</span>: <span class="string">'10111'</span>,</div><div class="line">  <span class="string">'B'</span>: <span class="string">'111010101'</span>,</div><div class="line">  <span class="string">'C'</span>: <span class="string">'11101011101'</span>,</div><div class="line">  <span class="string">'D'</span>: <span class="string">'1110101'</span>,</div><div class="line">  <span class="string">'E'</span>: <span class="string">'1'</span>,</div><div class="line">  <span class="string">'F'</span>: <span class="string">'101011101'</span>,</div><div class="line">  <span class="string">'G'</span>: <span class="string">'111011101'</span>,</div><div class="line">  <span class="string">'H'</span>: <span class="string">'1010101'</span>,</div><div class="line">  <span class="string">'I'</span>: <span class="string">'101'</span>,</div><div class="line">  <span class="string">'J'</span>: <span class="string">'1011101110111'</span>,</div><div class="line">  <span class="string">'K'</span>: <span class="string">'111010111'</span>,</div><div class="line">  <span class="string">'L'</span>: <span class="string">'101110101'</span>,</div><div class="line">  <span class="string">'M'</span>: <span class="string">'1110111'</span>,</div><div class="line">  <span class="string">'N'</span>: <span class="string">'11101'</span>,</div><div class="line">  <span class="string">'O'</span>: <span class="string">'11101110111'</span>,</div><div class="line">  <span class="string">'P'</span>: <span class="string">'10111011101'</span>,</div><div class="line">  <span class="string">'Q'</span>: <span class="string">'1110111010111'</span>,</div><div class="line">  <span class="string">'R'</span>: <span class="string">'1011101'</span>,</div><div class="line">  <span class="string">'S'</span>: <span class="string">'10101'</span>,</div><div class="line">  <span class="string">'T'</span>: <span class="string">'111'</span>,</div><div class="line">  <span class="string">'U'</span>: <span class="string">'1010111'</span>,</div><div class="line">  <span class="string">'V'</span>: <span class="string">'101010111'</span>,</div><div class="line">  <span class="string">'W'</span>: <span class="string">'101110111'</span>,</div><div class="line">  <span class="string">'X'</span>: <span class="string">'11101010111'</span>,</div><div class="line">  <span class="string">'Y'</span>: <span class="string">'1110101110111'</span>,</div><div class="line">  <span class="string">'Z'</span>: <span class="string">'11101110101'</span>,</div><div class="line">  <span class="string">'0'</span>: <span class="string">'1110111011101110111'</span>,</div><div class="line">  <span class="string">'1'</span>: <span class="string">'10111011101110111'</span>,</div><div class="line">  <span class="string">'2'</span>: <span class="string">'101011101110111'</span>,</div><div class="line">  <span class="string">'3'</span>: <span class="string">'1010101110111'</span>,</div><div class="line">  <span class="string">'4'</span>: <span class="string">'10101010111'</span>,</div><div class="line">  <span class="string">'5'</span>: <span class="string">'101010101'</span>,</div><div class="line">  <span class="string">'6'</span>: <span class="string">'11101010101'</span>,</div><div class="line">  <span class="string">'7'</span>: <span class="string">'1110111010101'</span>,</div><div class="line">  <span class="string">'8'</span>: <span class="string">'111011101110101'</span>,</div><div class="line">  <span class="string">'9'</span>: <span class="string">'11101110111011101'</span>,</div><div class="line">  <span class="string">'.'</span>: <span class="string">'10111010111010111'</span>,</div><div class="line">  <span class="string">','</span>: <span class="string">'1110111010101110111'</span>,</div><div class="line">  <span class="string">'?'</span>: <span class="string">'101011101110101'</span>,</div><div class="line">  <span class="string">"'"</span>: <span class="string">'1011101110111011101'</span>,</div><div class="line">  <span class="string">'!'</span>: <span class="string">'1110101110101110111'</span>,</div><div class="line">  <span class="string">'/'</span>: <span class="string">'1110101011101'</span>,</div><div class="line">  <span class="string">'('</span>: <span class="string">'111010111011101'</span>,</div><div class="line">  <span class="string">')'</span>: <span class="string">'1110101110111010111'</span>,</div><div class="line">  <span class="string">'&amp;'</span>: <span class="string">'10111010101'</span>,</div><div class="line">  <span class="string">':'</span>: <span class="string">'11101110111010101'</span>,</div><div class="line">  <span class="string">';'</span>: <span class="string">'11101011101011101'</span>,</div><div class="line">  <span class="string">'='</span>: <span class="string">'1110101010111'</span>,</div><div class="line">  <span class="string">'+'</span>: <span class="string">'1011101011101'</span>,</div><div class="line">  <span class="string">'-'</span>: <span class="string">'111010101010111'</span>,</div><div class="line">  <span class="string">'_'</span>: <span class="string">'10101110111010111'</span>,</div><div class="line">  <span class="string">'"'</span>: <span class="string">'101110101011101'</span>,</div><div class="line">  <span class="string">'$'</span>: <span class="string">'10101011101010111'</span>,</div><div class="line">  <span class="string">'@'</span>: <span class="string">'10111011101011101'</span>,</div><div class="line">  <span class="string">' '</span>: <span class="string">'0'</span> <span class="comment">// Technically is 7 0-bits, but we assume that a space will always be between two other characters</span></div><div class="line">&#125;;</div><div class="line">Morse.encode = <span class="function"><span class="keyword">function</span>(<span class="params">message</span>)</span>&#123;</div><div class="line">	<span class="keyword">let</span> k = message.split(<span class="string">''</span>).map(<span class="function"><span class="params">v</span> =&gt;</span> Morse.alpha[v]).join(<span class="string">'000'</span>)</div><div class="line">	k+=<span class="string">"0"</span>.repeat((<span class="number">32</span>-k.length%<span class="number">32</span>)%<span class="number">32</span>)</div><div class="line">	<span class="keyword">return</span> arr = k.match(<span class="regexp">/\d&#123;32&#125;/g</span>).map(<span class="function"><span class="params">v</span> =&gt;</span> -(~<span class="built_in">parseInt</span>(v,<span class="number">2</span>)+<span class="number">1</span>))</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Morse.decode = <span class="function"><span class="keyword">function</span>(<span class="params">integerArray</span>)</span>&#123;</div><div class="line">  	<span class="keyword">return</span> integerArray.map(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</div><div class="line">  		<span class="keyword">if</span>(v&gt;<span class="number">0</span>)&#123;</div><div class="line">  			<span class="keyword">return</span> <span class="string">"0"</span>.repeat((<span class="number">32</span>-v.toString(<span class="number">2</span>).length%<span class="number">32</span>)%<span class="number">32</span>)+v.toString(<span class="number">2</span>)</div><div class="line">  		&#125;<span class="keyword">else</span>&#123;</div><div class="line">  			<span class="keyword">let</span> tem = (~v).toString(<span class="number">2</span>)</div><div class="line">  			tem=<span class="string">"0"</span>.repeat((<span class="number">32</span>-tem.length%<span class="number">32</span>)%<span class="number">32</span>)+tem</div><div class="line">  			<span class="keyword">return</span> tem.split(<span class="string">''</span>).map(<span class="function"><span class="params">v</span>=&gt;</span>&#123;<span class="keyword">return</span> v^<span class="number">1</span>&#125;).join(<span class="string">''</span>)</div><div class="line">  		&#125;</div><div class="line">  	&#125;).join(<span class="string">''</span>).replace(<span class="regexp">/0+$/</span>,<span class="string">''</span>).split(<span class="string">'000'</span>).map(<span class="function"><span class="params">v</span>=&gt;</span> v[<span class="number">0</span>]==<span class="number">0</span>?<span class="string">" "</span>+check(v.substring(<span class="number">1</span>)):check(v)).join(<span class="string">''</span>)</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">s</span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">in</span> Morse.alpha)&#123;</div><div class="line">		<span class="keyword">if</span>(Morse.alpha[v] == s)</div><div class="line">			<span class="keyword">return</span> v</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>codewars里的票数最高的答案的decode如下</p>
<p>果然还是要学习一个_(:зゝ∠).. 我写的check函数就显得比较冗余而且速度很慢…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Morse.decode = <span class="function"><span class="keyword">function</span>(<span class="params">ints</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> bits = ints.map(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="string">'00000000000000000000000000000000'</span> + (i &gt;&gt;&gt; <span class="number">0</span>).toString(<span class="number">2</span>)).slice(<span class="number">-32</span>)</div><div class="line">  &#125;).join(<span class="string">''</span>)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> bits.replace(<span class="regexp">/0+$/</span>, <span class="string">''</span>).split(<span class="string">'0000000'</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">word</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> word.split(<span class="string">'000'</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> Morse.bits[c]</div><div class="line">    &#125;).join(<span class="string">''</span>)</div><div class="line">  &#125;).join(<span class="string">' '</span>)</div><div class="line">&#125;</div><div class="line">Morse.bits = &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> Morse.alpha) &#123;</div><div class="line">  Morse.bits[Morse.alpha[x]] = x</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>朋神说自动机最快_(:зゝ∠)…（然而我不会… 有空再研究一下….）</p>
<p>上面的bits还可以这样实现↓</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Morse.bits = <span class="built_in">Object</span>.keys(Morse.alpha).reduce(<span class="function">(<span class="params">p, n</span>) =&gt;</span> (p[Morse.alpha[n]] = n,p), &#123;&#125;)</div></pre></td></tr></table></figure>
<p>一年又要过去啦~~</p>
<p>新年快乐~~</p>
<p>QAQ加油呀加油~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/morse-encoding/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个题目的要求就是让我们写两个方法&lt;/p
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars - 4kyu - Strip Url Params</title>
    <link href="http://yoursite.com/2016/12/23/2016-12-23-Codewars-4kyu-StripUrlParams/"/>
    <id>http://yoursite.com/2016/12/23/2016-12-23-Codewars-4kyu-StripUrlParams/</id>
    <published>2016-12-23T09:20:20.000Z</published>
    <updated>2016-12-30T03:51:22.226Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.codewars.com/kata/strip-url-params/train/javascript" target="_blank" rel="external">题目</a></p>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h3><h5 id="Complete-the-method-so-that-it-does-the-following"><a href="#Complete-the-method-so-that-it-does-the-following" class="headerlink" title="Complete the method so that it does the following:"></a>Complete the method so that it does the following:</h5><ul>
<li>Removes any duplicate query string parameters from the url</li>
<li>Removes any query string parameters specified within the 2nd argument (optional array)</li>
</ul>
<h5 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">stripUrlParams(<span class="string">'www.codewars.com?a=1&amp;b=2&amp;a=2'</span>) <span class="comment">// returns 'www.codewars.com?a=1&amp;b=2'</span></div><div class="line">stripUrlParams(<span class="string">'www.codewars.com?a=1&amp;b=2&amp;a=2'</span>, [<span class="string">'b'</span>]) <span class="comment">// returns 'www.codewars.com?a=1'</span></div><div class="line">stripUrlParams(<span class="string">'www.codewars.com'</span>, [<span class="string">'b'</span>]) <span class="comment">// returns 'www.codewars.com'</span></div></pre></td></tr></table></figure>
<p>I coded 10+ lines but the best practices of all solutions is 2 lines… sad ….</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//my solution</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stripUrlParams</span>(<span class="params">url, paramsToStrip</span>)</span>&#123;</div><div class="line">	<span class="keyword">let</span> params = url.substring(url.indexOf(<span class="string">"?"</span>)+<span class="number">1</span>)</div><div class="line">	<span class="keyword">let</span> k = []</div><div class="line">	<span class="keyword">let</span> j = params.split(<span class="string">"&amp;"</span>).filter(<span class="function">(<span class="params">v,i</span>)=&gt;</span>&#123;</div><div class="line">		<span class="keyword">let</span> tem = v.split(<span class="string">"="</span>)[<span class="number">0</span>]</div><div class="line">		<span class="keyword">if</span> (k.indexOf(tem)==<span class="number">-1</span> &amp;&amp; test(paramsToStrip,tem))&#123;</div><div class="line">			k.push(tem)</div><div class="line">			<span class="keyword">return</span> v</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">	<span class="keyword">return</span> url.substring(<span class="number">0</span>,url.indexOf(<span class="string">"?"</span>)+<span class="number">1</span>)+j.join(<span class="string">"&amp;"</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> test = <span class="function">(<span class="params">arr,p</span>)=&gt;</span>&#123;</div><div class="line">	<span class="keyword">if</span>(arr==<span class="literal">undefined</span> || arr.length==<span class="number">0</span>)</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span></div><div class="line">	<span class="keyword">return</span> arr.indexOf(p)==<span class="number">-1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//best practices </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stripUrlParams</span>(<span class="params">url, paramsToStrip</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> url.replace(<span class="regexp">/&amp;?([^?=]+)=.+?/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">m, p1, qPos</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> url.indexOf(p1 + <span class="string">'='</span>) &lt; qPos || (paramsToStrip||[]).indexOf(p1) &gt; <span class="number">-1</span> ? <span class="string">""</span>: m;</div><div class="line">   &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>get了一下replace的小trick..</p>
<p>该好好学学正则了<em>(:зゝ∠)</em>…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/strip-url-params/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Description&quot;&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo＋GitHub pages＋多说搭建博客</title>
    <link href="http://yoursite.com/2016/11/26/2016-11-26-hexo+GitHub%20pages+%E5%A4%9A%E8%AF%B4%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/11/26/2016-11-26-hexo+GitHub pages+多说搭建博客/</id>
    <published>2016-11-26T04:46:25.000Z</published>
    <updated>2016-11-26T07:56:33.434Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我的搭建环境"><a href="#我的搭建环境" class="headerlink" title="我的搭建环境"></a>我的搭建环境</h3><blockquote>
<p>OS: Windows_NT 6.3.9600 win32 x64</p>
<p>hexo-cli: 1.0.2</p>
<p>hexo：3.2.2</p>
<p>hexo theme：material</p>
<p>git：2.9.0.windows.1</p>
</blockquote>
<h2 id="Step-1-安装-Node-js"><a href="#Step-1-安装-Node-js" class="headerlink" title="Step 1 安装 Node.js"></a>Step 1 安装 Node.js</h2><p><a href="https://nodejs.org/en/" target="_blank" rel="external">nodejs官网</a></p>
<h2 id="Step-2-安装Hexo"><a href="#Step-2-安装Hexo" class="headerlink" title="Step 2 安装Hexo"></a>Step 2 安装Hexo</h2><p><code>npm install -g hexo</code></p>
<h2 id="Step-3-搭建本地博客"><a href="#Step-3-搭建本地博客" class="headerlink" title="Step 3 搭建本地博客"></a>Step 3 搭建本地博客</h2><ul>
<li><p><strong>新建一个目录,如blog</strong></p>
</li>
<li><p><strong>在该目录下执行</strong><br><code>hexo init</code><br><code>npm install</code><br>此时默认主题默认配置的博客就搭建完成了</p>
</li>
<li><p><strong>安装关于启动服务器的插件</strong><br><code>npm install hexo-server --save</code></p>
</li>
<li><p><strong>启动服务器 默认4000端口</strong><br><code>hexo s</code></p>
</li>
<li><p>5.打开<a href="localhost:4000" target="_blank" rel="external">localhost:4000</a></p>
</li>
</ul>
<h2 id="Step-4-主题和配置"><a href="#Step-4-主题和配置" class="headerlink" title="Step 4 主题和配置"></a>Step 4 主题和配置</h2><p>在 <a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a>选择某个喜欢的主题，以<a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="external">Material</a>为例，假设当前目录为 “blog”。</p>
<p>前往material主题发布页面下载主题的压缩包</p>
<p>解压并将目录更名为<strong>material</strong></p>
<p> 将<strong>material</strong>目录 移动至 <strong>blog/themes/</strong> 目录下</p>
<p>将 blog 目录下的 <strong>_config.yml</strong> 文件中的 <strong>theme</strong> 属性值改为 <strong>material</strong></p>
<p>此时主题更换成功，可启动 server 验证效果</p>
<p>对于<strong>_config.yml</strong> 中的其他属性可根据情况自行修改</p>
<h2 id="Step-5-将博客部署到Github"><a href="#Step-5-将博客部署到Github" class="headerlink" title="Step 5 将博客部署到Github"></a>Step 5 将博客部署到Github</h2><ul>
<li><p><strong>新建仓库名为 <code>github用户名.github.io</code></strong><br>比如我的就是 <a href="lizimeowww.github.io">lizimeowww.github.io</a><br>然后就可以访问了</p>
</li>
<li><p><strong>安装 hexo 关于git 的组件</strong><br><code>npm install hexo-deployer-git --save</code></p>
</li>
<li><p><strong>在_config.yml 中为 git 添加配置</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    type: git</div><div class="line">    repository: 你的仓库地址(git@github.com/用户名/用户名.github.io.git)</div><div class="line">    branch: master</div></pre></td></tr></table></figure>
</li>
<li><p><strong>执行</strong><br>  &lt;每次修改都要执行这些命令才能在github pages看到效果&gt;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
</li>
</ul>
<p>部署完成之后访问你的如 <code>lizimeowww.github.io</code> 的网址,即可看到和本地一样的效果。</p>
<h2 id="Step-6-删写博客"><a href="#Step-6-删写博客" class="headerlink" title="Step 6 删写博客"></a>Step 6 删写博客</h2><ul>
<li><p><strong>新建博客</strong><br><code>hexo new &quot;文章名&quot;</code><br>或者直接写一个.md文件丢进<code>source/_post</code>这个目录下就可以<br>记得要加上Front-matter </p>
<img src="/2016/11/26/2016-11-26-hexo+GitHub%20pages+多说搭建博客/1.png" alt="image" title="image">
</li>
<li><p><strong>删除文章</strong><br>直接删掉 source/_post 下对应文章的文件，然后重新生成+部署即可。有时可能要多刷新几次才能看到效果。</p>
</li>
</ul>
<h2 id="Step-7-评论系统"><a href="#Step-7-评论系统" class="headerlink" title="Step 7 评论系统"></a>Step 7 评论系统</h2><ul>
<li><p>登录 <a href="http://duoshuo.com/" target="_blank" rel="external">http://duoshuo.com/</a>点击<strong>我要安装</strong>，设置自己的网站信息，获得以下通用代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 多说评论框 start --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds-thread"</span> <span class="attr">data-thread-key</span>=<span class="string">"请将此处替换成文章在你的站点中的ID"</span> <span class="attr">data-title</span>=<span class="string">"请替换成文章的标题"</span> <span class="attr">data-url</span>=<span class="string">"请替换成文章的网址"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多说评论框 end --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> duoshuoQuery = &#123;<span class="attr">short_name</span>:<span class="string">"lizimeowww"</span>&#125;;</div><div class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">		ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</div><div class="line">		ds.src = (<span class="built_in">document</span>.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;</div><div class="line">		ds.charset = <span class="string">'UTF-8'</span>;</div><div class="line">		(<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] </div><div class="line">		 || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</div><div class="line">	&#125;)();</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多说公共JS代码 end --&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在<code>_config.yml</code>中添加多说的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">duoshuo: </div><div class="line">  #on: true</div><div class="line">  domain: http://lizimeowww.duoshuo.com</div><div class="line">  # 是否开启多说评论，http://duoshuo.com/create-site/</div><div class="line">  # 使用上面网址登陆你的多说，然后创建站点，在 domain 中填入你设定的域名</div><div class="line">  # http://你的多说域名.duoshuo.com</div></pre></td></tr></table></figure>
</li>
<li><p>打开<code>themes\landscape\layout\_partial\comment.ejs</code>，全选，替换为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;% if (page.comments)&#123; %&gt;  </div><div class="line">&lt;section id=&quot;comment&quot;&gt;  </div><div class="line">  这里要放置多说提供的通用代码  </div><div class="line">&lt;/section&gt;  </div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>修改模板</p>
<p>将data-thread-key=”请将此处替换成文章在你的站点中的ID” 替换成data-thread-key=”&lt;%= page.path %&gt;”<br>将data-title=”请替换成文章的标题” 替换成 data-title=”&lt;%= page.title %&gt;”<br>将data-url=”请替换成文章的网址” 替换成 data-url=”&lt;%= page.permalink %&gt;”</p>
<p>​</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看教程不如看官方文档！</p>
<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo的官方文档</a></p>
<p><a href="https://material.vss.im/start/" target="_blank" rel="external">material主题的官方文档</a></p>
<p><del>多说好丑</del></p>
<p>原本接了Travis CI 自动部署 不知道哪里搞错…博客就被我玩坏了😂</p>
<p> 等我考完试再把多说改成Disqus..&amp;重新弄一下自动部署好了…..</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;我的搭建环境&quot;&gt;&lt;a href=&quot;#我的搭建环境&quot; class=&quot;headerlink&quot; title=&quot;我的搭建环境&quot;&gt;&lt;/a&gt;我的搭建环境&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;OS: Windows_NT 6.3.9600 win32 x64&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>解决Ruby gem被墙的问题</title>
    <link href="http://yoursite.com/2016/11/24/2016-11-24-%E8%A7%A3%E5%86%B3Ruby%20gem%E8%A2%AB%E5%A2%99%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/11/24/2016-11-24-解决Ruby gem被墙的问题/</id>
    <published>2016-11-24T02:26:49.000Z</published>
    <updated>2016-11-26T07:39:06.154Z</updated>
    
    <content type="html"><![CDATA[<p>gem  install 的时候…..</p>
<p><code>C:\Windows\System32&gt;gem install jekyll ERROR:  Could not find a valid gem &#39;jekyll&#39; (&gt;= 0), here is why:           Unable to download data from https://rubygems.org/ - SSL_connect retur ned=1 errno=0 state=SSLv3 read server certificate B: certificate verif</code></p>
<p>被墙了…</p>
<p>所以只能翻墙或者换源…</p>
<p>之前用SocksCap翻得好好的…今天突然不行了<em>(:зゝ∠)</em>…</p>
<p>所以还是换个源…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ gem sources --remove https://rubygems.org/</div><div class="line">$ gem sources -a https://ruby.taobao.org/</div><div class="line">$ gem sources -l</div><div class="line">*** CURRENT SOURCES ***</div><div class="line"></div><div class="line">https://ruby.taobao.org</div></pre></td></tr></table></figure>
<p>换taobao源的时候报了这个错..- - </p>
<p><code>Error fetching https://ruby.taobao.org/: SSL_connect returned=1 errno=0 stat</code></p>
<p>大概有两种解决方法</p>
<h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><ul>
<li><p>1、下载<a href="http://pan.baidu.com/s/1sl8fk1f" target="_blank" rel="external">http://pan.baidu.com/s/1sl8fk1f</a> 复制到ruby安装的根目录</p>
</li>
<li><p>2、添加系统环境变量：</p>
<p>SSL_CERT_FILE=ruby的根目录加\cacert.pem（类似c:\Ruby22-x64\cacert.pem）</p>
</li>
<li><p>3、关闭命令行，重新打开，重新键入</p>
<p><code>gem sources -a https://ruby.taobao.org/</code></p>
</li>
</ul>
<h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><ul>
<li>使用 <a href="http://gems.ruby-china.org/" target="_blank" rel="external">http://gems.ruby-china.org/</a> 做为源</li>
</ul>
<p>（第二种没试..第一种亲测可行…</p>
<p><del>fu*k gfw</del>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gem  install 的时候…..&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:\Windows\System32&amp;gt;gem install jekyll ERROR:  Could not find a valid gem &amp;#39;jekyll&amp;#39; (&amp;gt;= 0),
    
    </summary>
    
    
      <category term="杂" scheme="http://yoursite.com/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序的小练手</title>
    <link href="http://yoursite.com/2016/11/23/2016-11-23-wechat-demo/"/>
    <id>http://yoursite.com/2016/11/23/2016-11-23-wechat-demo/</id>
    <published>2016-11-23T11:22:31.000Z</published>
    <updated>2016-11-26T07:38:32.815Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>喵~</p>
</blockquote>
<p>微信小程序是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。用完即走，适合场景化的问题。</p>
<p>微信推了小程序之后大家对它的关注度一直很高。所以就和朋神默默的写了个demo…</p>
<p style="color:#aaa;font-size:14px;">10月底写的小程序…现在11月都快过完了才写博客2333<em>(:зゝ∠)</em>……..</p>

<p><img src="2.gif" alt="2"></p>
<p>考虑了一下小程序用完即走的定位，我们做的这个东西功能十分的简单明确，就是用来进行活动的查看和签到，通过微信提供的位置的api获取坐标进行位置的判断。</p>
<p>因为功能比较简单所以就没有用脚手架….</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p> <img src="1.png" alt="1"></p>
<p>整个项目的结构大概如图，小程序结构还是比较清晰&amp;好理解的，<code>.js</code>脚本文件，<code>.json</code>配置文件，<code>.wxss</code>样式表文件 </p>
<p>app.json 是对整个小程序的全局配置,可以配置有你的项目哪些页面，tabBar，导航条，网络超时时间等。</p>
<p>app.js是小程序逻辑。在app.js里用<code>App()</code> 函数用来注册一个小程序。指定小程序的生命周期函数等。</p>
<p><strong>tips：</strong></p>
<p><strong>pages里的四个文件必须具有相同的路径与文件名。只能配置最少2个、最多5个 tab</strong> 。</p>
<h3 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a>WXML</h3><p>有以下几个功能，感觉跟vue差不多-  -….文档写的挺清楚的….没什么好讲的地方…</p>
<p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/data.html?t=20161122" target="_blank" rel="external">数据绑定</a>、<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/list.html?t=20161122" target="_blank" rel="external">列表渲染</a>、<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/conditional.html?t=20161122" target="_blank" rel="external">条件渲染</a>、<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/template.html?t=20161122" target="_blank" rel="external">模板</a>、<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/event.html?t=20161122" target="_blank" rel="external">事件</a>、<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/import.html?t=20161122" target="_blank" rel="external">引用</a></p>
<h3 id="WXSS"><a href="#WXSS" class="headerlink" title="WXSS"></a>WXSS</h3><p>跟CSS几乎是一样，多扩展了两个特性，</p>
<ul>
<li><p>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。</p>
<p>rem（root em）: 规定屏幕宽度为20rem；1rem = (750/20)rpx 。</p>
</li>
<li><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径。</p>
</li>
</ul>
<h2 id="活动的排序"><a href="#活动的排序" class="headerlink" title="活动的排序"></a>活动的排序</h2><p>获取活动的数据，活动有三种状态，正在进行，即将开始，已结束。要令正在进行的活动排在活动列表的最前面，然后按照活动的开始时间进行排序。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">wx.request(&#123;</div><div class="line">        url,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="params">resp</span> =&gt;</span> &#123;</div><div class="line">          <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">          <span class="keyword">const</span> a = resp.data.data.map(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</div><div class="line">            i.start = <span class="keyword">new</span> <span class="built_in">Date</span>(i.start)</div><div class="line">            i.end = <span class="keyword">new</span> <span class="built_in">Date</span>(i.end)</div><div class="line">            <span class="keyword">return</span> i</div><div class="line">          &#125;)</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">"resp"</span>,resp)</div><div class="line">          <span class="keyword">const</span> cmp = <span class="function">(<span class="params">a, b</span>) =&gt;</span> b.start - a.start</div><div class="line">          <span class="keyword">const</span> coming = a.filter(<span class="function"><span class="params">i</span> =&gt;</span> i.start &gt; now).sort(cmp).map(<span class="function"><span class="params">i</span> =&gt;</span> (i.statu = <span class="number">0</span>,i))</div><div class="line">          <span class="keyword">const</span> ing = a.filter(<span class="function"><span class="params">i</span> =&gt;</span> i.start &lt; now &amp;&amp; i.end &gt; now).sort(cmp).map(<span class="function"><span class="params">i</span> =&gt;</span> (i.statu = <span class="number">1</span>,i))</div><div class="line">          <span class="keyword">const</span> end = a.filter(<span class="function"><span class="params">i</span> =&gt;</span> i.end &lt; now).sort(cmp).map(<span class="function"><span class="params">i</span> =&gt;</span> (i.statu = <span class="number">2</span>,i))</div><div class="line">          <span class="keyword">const</span> items = [...ing, ...coming, ...end].map(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</div><div class="line">                                                    i.img = u + i.img</div><div class="line">                                                    i.time = util.formatTime(i.start)</div><div class="line">                                                    <span class="keyword">return</span> i</div><div class="line">                                                  &#125;)</div><div class="line">        </div><div class="line">          <span class="keyword">if</span> (items.length) &#123;</div><div class="line">            <span class="keyword">this</span>.setData(&#123;  <span class="attr">items</span>:that.data.items.concat(items), <span class="attr">loading</span>: <span class="literal">true</span> &#125;);</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">this</span>.setData(&#123; <span class="attr">hasMore</span>: <span class="literal">false</span>, <span class="attr">loading</span>: <span class="literal">false</span> &#125;);</div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">fail</span>: <span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e)</div><div class="line">      &#125;)</div></pre></td></tr></table></figure>
<p>活动列表的下拉加载遇到了一点坑。。</p>
<p>在wxml的代码里，需要对<code>scroll-view</code>给定一个固定的height，不然他不会有加载的效果，为了适配不同的分辨率，通过<code>wx.getSystemInfo</code>获取用户的窗口高度进行数据绑定。（WXML 中的动态数据均来自对应 Page 的 data）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">scroll-y</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"height:&#123;&#123;windowH&#125;&#125;px"</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">bindscrolltolower</span>=<span class="string">"handleLoadMore"</span> &gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"activity-box"</span>  <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;items&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"_id"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; item.img &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"img &#123;&#123; item.statu !== 1 ? 'mask' : '' &#125;&#125; &#123;&#123; item.statu === 0 ? 'coming' : '' &#125;&#125; &#123;&#123; item.statu === 2 ? 'end' : '' &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"block time"</span>&gt;</span>&#123;&#123; item.time &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123; hasMore &#125;&#125;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"../../image/loading.gif"</span> <span class="attr">mode</span>=<span class="string">"aspectFill"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>努力加载中_(:зゝ∠)_<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>没有更多内容了<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure>
<p>总而言之，跟vue有一点点像。。&amp;<del>朋神一直在吐槽小程序的api很蠢</del>。。。<em>(:зゝ∠)</em>….</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;喵~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;微信小程序是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。用完即走，适合场景化的问题。&lt;/p&gt;
&lt;p&gt;微信推了小程序之后大家对它的关注度一直很高。所
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>react-native android 在windows下的初体验</title>
    <link href="http://yoursite.com/2015/11/16/2015-11-16-react-native%20android%20%E5%9C%A8windows%E4%B8%8B%E7%9A%84%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2015/11/16/2015-11-16-react-native android 在windows下的初体验/</id>
    <published>2015-11-16T03:30:00.000Z</published>
    <updated>2016-11-24T14:26:33.379Z</updated>
    
    <content type="html"><![CDATA[<p>#react-native android 在windows下的初体验#</p>
<h2 id="需要的环境："><a href="#需要的环境：" class="headerlink" title="需要的环境："></a>需要的环境：</h2><ul>
<li>node 4.0以上 （我用的是node5.0）</li>
<li>JDK</li>
<li>android SDK</li>
</ul>
<h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><p><a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></p>
<h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>从<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">Java官网</a>选下载最新的JDK并安装</p>
<p>配好环境变量（这里就不赘述了）</p>
<p>配置完毕后，通过cmd运行以下命令：<code>java -version</code>，<code>javac</code> 如果出现返回信息，则设置成功。</p>
<h3 id="下载android-SDK"><a href="#下载android-SDK" class="headerlink" title="下载android SDK"></a>下载android SDK</h3><p>下载地址：<a href="http://developer.android.com/sdk/index.html" target="_blank" rel="external">http://developer.android.com/sdk/index.html</a></p>
<p>Andorid SDK为Android管理开发包工具，提供了Android各级平台的开发包和工具。注意，因为我们是独立安装，不是一体化(集成系列工具)所以需要单独下载SDK。</p>
<p>运行安装文件，并把安装目录下tools文件夹路径设置进PATH环境变量。</p>
<p>到安装目录运行SDK Manager.exe 。<br>把android 4.0以上的包和extra都装了。<br>（可能需要翻一下墙）</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><code>npm install -g react-native-cli</code></p>
<p><code>react-native init AwesomeProject</code></p>
<p><code>cd AwesomeProject/</code></p>
<h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p><code>react-native start</code> </p>
<p>运行成功后，打开另一个命令行窗口，</p>
<p><code>cd AwesomeProject</code></p>
<p>连接好安卓模拟器或者真机（要android5.0以上，不然运行之后会出现Error Type 3）</p>
<p>因为我的安卓模拟器（AVD）超级卡，原先是勾选了Use Host GPU，模拟器启动会加快，但是后来不知道为什么模拟器启动后会自动黑屏。取消勾选Use Host GPU之后模拟器又启动不了，于是我就把自己的小米2s刷成了android 5.0 <em>(:зゝ∠)</em>。</p>
<p>然后</p>
<p><code>adb devices</code></p>
<p>查看自己是否连接上安卓设备，确定连接上后</p>
<p><code>react-native run-android</code></p>
<p>这个时候记得打开你的VPN。。</p>
<p>如果出现了unable to download js bundle，也就是不能reload js，可以尝试<br><code>adb reverse tcp:8081 tcp:8081</code></p>
<p>如果还是不行的话，你可以尝试这篇文章的方法<br><a href="http://www.cnblogs.com/unofficial/p/4843734.html" target="_blank" rel="external">http://www.cnblogs.com/unofficial/p/4843734.html</a></p>
<p>最后的最后，终与可以在手机上看到这个应用啦。</p>
<p>然后你就可以在选定的文本编辑器中打开 index.android.js 并且编辑代码。</p>
<p>摇晃手机或者按菜单键，可以看到reload JS。点击，即可看到修改之后的样子。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>QAQ自带bug体质，几乎每一个坑都踩到了。GFW真是太烦了，下载东西超慢。QAQ。然后在sdk manager下载东西的时候出现了下载了好久最后没有下载下来的情况，<br>好在舍友在玩安卓，从他那儿复制了extra的整个包才得以继续。还有一个坑就是在手机上安装完之后出现了红色的页面，就是不能reload js，谷歌百度之后尝试了各种方法，最后才跑了起来。<br>QAQ痛心疾首，感觉下一台电脑必须是mac了。<br>_(:зゝ∠)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#react-native android 在windows下的初体验#&lt;/p&gt;
&lt;h2 id=&quot;需要的环境：&quot;&gt;&lt;a href=&quot;#需要的环境：&quot; class=&quot;headerlink&quot; title=&quot;需要的环境：&quot;&gt;&lt;/a&gt;需要的环境：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;node
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于impress.js的学习小结</title>
    <link href="http://yoursite.com/2015/09/22/2015-09-22-%E5%85%B3%E4%BA%8Eimpress.js%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2015/09/22/2015-09-22-关于impress.js的学习小结/</id>
    <published>2015-09-21T16:40:03.000Z</published>
    <updated>2016-11-26T07:37:48.822Z</updated>
    
    <content type="html"><![CDATA[<p>因为工作室要办宣讲会 打算用impress.js做几个ppt</p>
<p>所以我就临时的学了一下 边做边学</p>
<p>感觉这个东西的难点大概就是对三维空间的利用吧 </p>
<p>标准格式如下</p>
<p><code>&lt;div class=&quot;step&quot; data-属性=&quot;500&quot; data-y=&quot;-400&quot;&gt;</code></p>
<h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><p><code>data-x data-y data-z</code> 定义元素中心在画布的坐标，默认为0 。</p>
<p><code>data-scale = &quot;5&quot;</code> 这个元素就会被放大成原来的5倍。如果从这个场景退出，它会被还原原来的大小（缩小5倍）。</p>
<p><code>data-rotate = &quot;360&quot;</code>顺时针旋转360度</p>
<p><code>data-rotate-x = &quot;100&quot;</code> 绕x轴旋转100度。</p>
<p><code>data-rotate-y = &quot;100&quot;</code> 绕y轴旋转100度。</p>
<p><code>data-rotate-z = &quot;100&quot;</code> 绕z轴旋转100度。</p>
<p><code>data-transition-duration=&quot;2000&quot;</code> 改变切换场景的速度，默认的话是1000（也就是1秒）。</p>
<p><code>data-perspective=&quot;500&quot;</code>来改变透视的深度，默认是1000。</p>
<h4 id="还需要使用-impress-init-函数来初始化impress-js"><a href="#还需要使用-impress-init-函数来初始化impress-js" class="headerlink" title="还需要使用 impress().init() 函数来初始化impress.js"></a>还需要使用 <code>impress().init()</code> 函数来初始化impress.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;js/impress.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;impress().init()&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>如果空间布局合理的话 最后用</p>
<p><code>&lt;div id=&quot;overview&quot; class=&quot;step&quot; data-x=&quot;3000&quot; data-y=&quot;1500&quot; data-scale=&quot;10&quot;&gt;</code></p>
<p>会有很酷炫的效果</p>
<p>也可以使用GUI工具<a href="https://github.com/tantaman/Strut" target="_blank" rel="external">Strut</a>进行可视化的制作…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为工作室要办宣讲会 打算用impress.js做几个ppt&lt;/p&gt;
&lt;p&gt;所以我就临时的学了一下 边做边学&lt;/p&gt;
&lt;p&gt;感觉这个东西的难点大概就是对三维空间的利用吧 &lt;/p&gt;
&lt;p&gt;标准格式如下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;step
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sublime的一些常用快捷键</title>
    <link href="http://yoursite.com/2015/08/09/2015-08-09-%E5%85%B3%E4%BA%8Esublime%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2015/08/09/2015-08-09-关于sublime的一些快捷键/</id>
    <published>2015-08-08T17:07:03.000Z</published>
    <updated>2016-11-24T14:27:52.574Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><code>Alt</code>：调出菜单</li>
<li><code>Ctrl + Shift + P</code>：调出命令板（Command Palette）</li>
<li><code>Ctrl + ` </code>：调出控制台<br><br></li>
<li><code>Shift+右键拖动</code>：多光标，用来更改或插入列内容</li>
<li><code>Ctrl + Enter</code>：在当前行下面新增一行然后跳至该行</li>
<li><code>Ctrl + Shift + Enter</code>：在当前行上面增加一行并跳至该行</li>
<li><code>Ctrl + ←/→</code>：进行逐词移动</li>
<li><code>Ctrl + Shift + ←/→</code>:进行逐词选择</li>
<li><code>Ctrl + ↑/↓</code>:移动当前显示区域</li>
<li><code>Ctrl + L</code>：选择当前行</li>
<li><code>Ctrl + Shift + ↑/↓</code>：移动当前行<br><br></li>
<li><code>Ctrl + D</code>：选择当前光标所在的词并高亮该词所有出现的位置，再次Ctrl + D选择该词出现的下一个位置</li>
<li><code>F3</code>：跳至当前关键字下一个位置</li>
<li><code>Shift + F3</code>：跳到当前关键字上一个位置</li>
<li><code>Alt+F3</code>：选择所有相同的词<br><br></li>
<li><code>Ctrl + Shift + L</code>：将当前选中区域打散</li>
<li><code>Ctrl + J</code>：把当前选中区域合并为一行</li>
<li><code>Ctrl + M</code>：在起始括号和结尾括号间切换</li>
<li><code>Ctrl + Shift + Space</code>：快速选择当前作用域的内容<br><br></li>
<li><code>Ctrl + F/H</code>：进行标准查找/替换，之后：<ul>
<li><code>Alt + C</code>：切换大小写敏感（Case-sensitive）模式</li>
<li><code>Alt + W</code>：切换整字匹配（Whole matching）模式</li>
<li><code>Alt + R</code>：切换正则匹配（Regex matching）模式</li>
<li><code>Ctrl + Shift + H</code>：替换当前关键字</li>
<li><code>Ctrl + Alt + Enter</code>：替换所有关键字匹配</li>
<li><code>Ctrl + Shift + F</code>：多文件搜索&amp;替换<br><br></li>
</ul>
</li>
<li><code>Ctrl + P</code>：跳转到指定文件，输入文件名后可以：<ul>
<li><code>@</code> :符号跳转：输入@symbol跳转到symbol符号所在的位置<ul>
<li><code>#</code> :关键字跳转：输入#keyword跳转到keyword所在的位置</li>
<li><code>:</code> :行号跳转：输入:12跳转到文件的第12行。</li>
</ul>
</li>
</ul>
</li>
<li><code>Ctrl + R</code>：跳转到指定符号</li>
<li><code>Ctrl + G</code>：跳转到指定行号<br><br></li>
<li><code>Ctrl+Tab</code> 按文件浏览过的顺序，切换当前窗口的标签页。</li>
<li><code>Ctrl+PageDown</code> 向左切换当前窗口的标签页。</li>
<li><code>Ctrl+PageUp</code> 向右切换当前窗口的标签页。</li>
<li><code>Alt+Shift+1</code> 窗口分屏，恢复默认1屏（非小键盘的数字）</li>
<li><code>Alt+Shift+2</code> 左右分屏-2列</li>
<li><code>Alt+Shift+3</code> 左右分屏-3列</li>
<li><code>Alt+Shift+4</code> 左右分屏-4列</li>
<li><code>Alt+Shift+5</code> 等分4屏</li>
<li><code>Alt+Shift+8</code> 垂直分屏-2屏</li>
<li><code>Alt+Shift+9</code> 垂直分屏-3屏<br>分屏之后，使用Ctrl + 数字键跳转到指定屏，使用Ctrl + Shift + 数字键将当前屏移动到指定屏</li>
<li><code>Ctrl+K+B</code> 开启/关闭侧边栏。</li>
<li><code>F11</code> 全屏模式</li>
<li><code>Shift+F11</code> 免打扰模式 </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alt&lt;/code&gt;：调出菜单&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + P&lt;/code&gt;：调出命令板（Command Palette）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + ` &lt;/code&gt;：调出控制台&lt;br&gt;&lt;br&gt;&lt;/
    
    </summary>
    
    
  </entry>
  
</feed>
